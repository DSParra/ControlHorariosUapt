/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Vista;

import Clases.Archivo;
import Clases.ConectarBase;
import Clases.Conexion;
import Clases.ConsultasObjetos;
import Controlador.ControladorHorarios;
import Objetos.Grupo;
import Objetos.Licenciatura;
import Objetos.Materia;
import Objetos.PeriodoHorarios;
import Objetos.Profesor;
import Objetos.periodoEscolar;
import cjb.ci.Mensaje;
import java.awt.Color;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author JeanCarlos
 */
public class VistaExcel extends javax.swing.JFrame {

    /**
     * Creates new form VistaExcel
     */
    public VistaExcel() {
        initComponents();
        this.getContentPane().setBackground(Color.WHITE);
    }

    File archivo;
    int numcorreo = 0;
    String cabeceras[];
    String tipoExcel = "";
    String cabecerasProfesor[] = {"rfc", "apellido paterno", "apellido materno", "nombre", "grado academico", "correo", "telefono"};
    String cabecerasMateria[] = {"clave de la materia", "unidad de aprendizaje", "horas", "creditos", "numero de periodo", "nucleo", "tipo", "licenciatura", "plan de estudios"};
    String cabecerasHorario[] = {"clave", "unidad_aprendizaje", "rfc", "profesor", "grupo", "periodo", "dia", "entrada", "salida"};
    ArrayList<Profesor> profes;
    ArrayList<Materia> materias;
    ArrayList<Grupo> grupos;
    ArrayList<Licenciatura> carreras;
    ArrayList<periodoEscolar> periodos;
    ArrayList<PeriodoHorarios> horarios;
    ArrayList<PeriodoHorarios> horariosBD;

    private File abrirArchivo() {
        String aux = "";
        String texto = "";
        String nombre = "";
        File abre = null;

        try {
            /**
             * llamamos el metodo que permite cargar la ventana
             */
            JFileChooser file = new JFileChooser();
            file.showOpenDialog(this);
            nombre = file.getSelectedFile().getName();
            /**
             * abrimos el archivo seleccionado
             */

            abre = file.getSelectedFile();
            //Archivo.AbreArchivoV1(abre);
            return abre;
//
//            /**
//             * recorremos el archivo, lo leemos para plasmarlo en el area de texto
//             */
//            if (abre != null) {
//                FileReader archivos = new FileReader(abre);
//                BufferedReader lee = new BufferedReader(archivos);
//                while ((aux = lee.readLine()) != null) {
//                    texto += aux + "\n";
//                }
//                lee.close();
//            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex + ""
                    + "\nNo se ha encontrado el archivo",
                    "ADVERTENCIA!!!", JOptionPane.WARNING_MESSAGE);
        }
        return abre;
        //El texto se almacena en el JTextArea
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnImportar = new javax.swing.JButton();
        btnExportar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTDatosExcel = new javax.swing.JTable();
        btnCarga = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtlog = new javax.swing.JTextArea();
        txtidentifica = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jCheckExcel = new javax.swing.JCheckBox();
        jCheckProfesores = new javax.swing.JCheckBox();
        jCheckMateriasBD = new javax.swing.JCheckBox();
        jCheckLllaves = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        btnImportar.setBackground(new java.awt.Color(102, 102, 0));
        btnImportar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnImportar.setForeground(new java.awt.Color(255, 255, 255));
        btnImportar.setText("Importar");
        btnImportar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImportarActionPerformed(evt);
            }
        });

        btnExportar.setBackground(new java.awt.Color(102, 102, 0));
        btnExportar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnExportar.setForeground(new java.awt.Color(255, 255, 255));
        btnExportar.setText("Exportar");
        btnExportar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportarActionPerformed(evt);
            }
        });

        jTDatosExcel.setBackground(new java.awt.Color(25, 83, 0));
        jTDatosExcel.setForeground(new java.awt.Color(255, 255, 255));
        jTDatosExcel.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTDatosExcel);

        btnCarga.setBackground(new java.awt.Color(102, 102, 0));
        btnCarga.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnCarga.setForeground(new java.awt.Color(255, 255, 255));
        btnCarga.setText("Cargar");
        btnCarga.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCargaActionPerformed(evt);
            }
        });

        txtlog.setColumns(20);
        txtlog.setRows(5);
        jScrollPane2.setViewportView(txtlog);

        txtidentifica.setText("No identificado");

        jButton3.setBackground(new java.awt.Color(102, 102, 0));
        jButton3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setText("Eliminar Celda");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton5.setBackground(new java.awt.Color(102, 102, 0));
        jButton5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton5.setForeground(new java.awt.Color(255, 255, 255));
        jButton5.setText("Ejectuar Pruebas");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jCheckExcel.setText("Comparacion en excel");

        jCheckProfesores.setText("Comparacion Profesores");

        jCheckMateriasBD.setText("Comparacion Materias");

        jCheckLllaves.setText("Datos Encontrados");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnImportar, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40)
                        .addComponent(btnExportar, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtidentifica, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 960, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(150, 150, 150)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 280, Short.MAX_VALUE)
                        .addComponent(btnCarga, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckProfesores)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jCheckExcel)
                                .addGap(76, 76, 76)
                                .addComponent(jCheckLllaves))
                            .addComponent(jCheckMateriasBD))
                        .addGap(0, 216, Short.MAX_VALUE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 644, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnExportar, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
                            .addComponent(btnImportar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(27, 27, 27)
                        .addComponent(jButton3)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnCarga, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtidentifica, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCheckExcel)
                            .addComponent(jCheckLllaves))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 505, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jCheckProfesores)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckMateriasBD)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 505, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnImportarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImportarActionPerformed
        archivo = abrirArchivo();
        Archivo.Importar(archivo, jTDatosExcel);
        cabeceras = new String[jTDatosExcel.getColumnCount()];
        for (int i = 0; i < jTDatosExcel.getColumnCount(); i++) {
            cabeceras[i] = jTDatosExcel.getColumnName(i);
        }
        tipoExcel = identifica();
        txtidentifica.setText(tipoExcel);

    }//GEN-LAST:event_btnImportarActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        importaBD();
        //muestraBD();
        ordenamientoBurbujaID("licenciatura");
        ordenamientoBurbujaNombre("materia");
        muestraBD();

        System.out.println("Busqueda " + busquedaBinariaRetID("INGENIERIA EN COMPUTACION", "licenciatura"));
        System.out.println("Busqueda " + busquedaBinariaRetNombre(6, "licenciatura"));

        System.out.println("Busqueda " + busquedaBinariaRetID("s2", "grupo"));
        System.out.println("Busqueda " + busquedaBinariaRetNombre(2, "grupo"));
        //txtidentifica.setForeground(Color.red);
        txtidentifica.setEditable(false);
        btnCarga.setEnabled(false);


    }//GEN-LAST:event_formWindowOpened

    public ArrayList<Object> extraeDatos() {
        ArrayList profesores = new ArrayList();

        for (int i = 0; i < jTDatosExcel.getRowCount(); i++) {
            Profesor profe = new Profesor();
            profe.setRfc(String.valueOf(jTDatosExcel.getValueAt(i, 1)));
            System.out.println(String.valueOf(jTDatosExcel.getValueAt(i, 1)));
            profe.setNombres((String) jTDatosExcel.getValueAt(i, 4));
            profe.setApellidoP((String) jTDatosExcel.getValueAt(i, 2));
            profe.setApellidoM((String) jTDatosExcel.getValueAt(i, 3));
            profe.setCorreo("no ingresado" + String.valueOf(numcorreo++));
            profe.setTelefono((String) jTDatosExcel.getValueAt(i, 7));
            profe.setGradoAcademico((String) jTDatosExcel.getValueAt(i, 3));
            profesores.add(profe);
        }
        return profesores;
    }

    public String identifica() {
        boolean identificado = false;
        if (cabeceras.length == cabecerasProfesor.length) {
            for (int i = 0; i < cabeceras.length; i++) {
                if (!cabeceras[i].equalsIgnoreCase(cabecerasProfesor[i])) {
                    break;
                }
            }
            txtlog.setText("Es un profesor");
            identificado = true;
            return "profesor";

        }
        if (cabeceras.length == cabecerasMateria.length && identificado) {
            for (int i = 0; i < cabeceras.length; i++) {
                if (!cabeceras[i].equalsIgnoreCase(cabecerasMateria[i])) {
                    break;
                }
            }
            identificado = true;
            return "materia";
        }

        if (cabeceras.length == cabecerasHorario.length) {
            for (int i = 0; i < cabeceras.length; i++) {
                if (!cabeceras[i].equalsIgnoreCase(cabecerasHorario[i])) {
                    break;
                }
            }
            identificado = true;
            return "horario";
        }
        if (!identificado) {
            return "No es encontro el tipo de excel";
        }
        return null;
    }
    private void btnCargaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCargaActionPerformed

        ArrayList horarios = guardaExcel();
        ConsultasObjetos.insertaMuchos(horarios, ConectarBase.conectado(), "horarios");
        //        if (String.valueOf(jcTipo.getSelectedItem()).equals("Profesor")) {
//            
//        }
//            ArrayList<Object> profes= extraeDatos();
//            System.out.println(Controlador.ControladorProfesores.insertaMuchos(profes));
//txtconsulta.setText(ConsultasObjetos.retornaConsulta(profes, ConectarBase.conectado(), "profesores"));
//ConsultasObjetos.insertaMuchos(profes, ConectarBase.conectado(), "profesores");

    }//GEN-LAST:event_btnCargaActionPerformed

    public ArrayList guardaExcel() {

        if (tipoExcel.equalsIgnoreCase("horario")) {
            System.out.println("Entrando a horario");
            ArrayList horarios = new ArrayList();
            PeriodoHorarios horario;

            for (int i = 0; i < jTDatosExcel.getRowCount(); i++) {
                horario = new PeriodoHorarios();
                horario.setClaveMateria(String.valueOf(jTDatosExcel.getValueAt(i, 0)));
                horario.setRfc(String.valueOf(String.valueOf(jTDatosExcel.getValueAt(i, 2))));
                if (ControladorHorarios.numdia(String.valueOf(jTDatosExcel.getValueAt(i, 6))) != 0) {
                    horario.setDia(String.valueOf(ControladorHorarios.numdia(String.valueOf(jTDatosExcel.getValueAt(i, 6)))));
                }
                horario.setIdGrupo(String.valueOf(busquedaBinariaRetID(String.valueOf(jTDatosExcel.getValueAt(i, 4)), "grupo")));
                horario.setIdPeriodo(String.valueOf(busquedaBinariaRetID(String.valueOf(jTDatosExcel.getValueAt(i, 5)), "periodo")));
                horario.setEntrada(String.valueOf(jTDatosExcel.getValueAt(i, 7)));
                horario.setSalida(String.valueOf(jTDatosExcel.getValueAt(i, 8)));
                horarios.add(horario);
                muestraHorarios(horario);
            }
            return horarios;
        }
        return null;
    }

    public void importaBD() {
        materias = new ArrayList(ConsultasObjetos.consultaMuchos("materia", null, null, null, null, null, ConectarBase.conectado()));
        profes = new ArrayList(ConsultasObjetos.consultaMuchos("profesores", null, null, null, null, null, ConectarBase.conectado()));
        grupos = new ArrayList(ConsultasObjetos.consultaMuchos("grupo", null, null, null, null, null, ConectarBase.conectado()));
        carreras = new ArrayList(ConsultasObjetos.consultaMuchos("licenciatura", null, null, null, null, null, ConectarBase.conectado()));
        periodos = new ArrayList(ConsultasObjetos.consultaMuchos("periodo_escolar", null, null, null, null, null, ConectarBase.conectado()));
    }

    public void muestraBD() {
        for (Object materia : materias) {
            System.out.println(((Materia) materia).getUnidadAprendizaje());
        }
//        for (Object profesor : profes){
//            System.out.println(((Profesor)profesor).getNombres());
//        }
        for (Object grupo : grupos) {
            System.out.println(((Grupo) grupo).getNombreGrupo());
        }
        for (Object licen : carreras) {
            System.out.println(((Licenciatura) licen).getLicenciatura());
        }
        for (Object periodo : periodos) {
            System.out.println(((periodoEscolar) periodo).getPeriodo());
        }
    }

    public void transforma() {

    }


    private void btnExportarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportarActionPerformed
        Archivo.Exportar(jTDatosExcel, "horario", "prueba1");
    }//GEN-LAST:event_btnExportarActionPerformed

    public boolean comparaGrupos() {
        boolean prueba = true;
        double entrada1, salida1, entrada2, salida2;
        for (int i = 0; i < horarios.size(); i++) {
            for (int j = 0; j < horarios.size(); j++) {
                //System.out.println("dia: "+horarios.get(i).getDia() + " ---->"+ "dia: "+horarios.get(j).getDia() );
                if (horarios.get(i).getDia().equals(horarios.get(j).getDia()) && i != j && horarios.get(i).getIdGrupo().equals(horarios.get(j).getIdGrupo())
                        && horarios.get(i).getClaveMateria().equals(horarios.get(j).getClaveMateria())) {
                    //System.out.println("Mismo dia ");
                    //System.out.println(horarios.get(i).getClaveMateria() + " " + horarios.get(i).getRfc() + " " + horarios.get(i).getIdPeriodo());
                    //System.out.println(horarios.get(j).getClaveMateria() + " " + horarios.get(j).getRfc() + " " + horarios.get(j).getIdPeriodo());
                    entrada1 = Double.parseDouble(horarios.get(i).getEntrada().substring(0, 2) + "." + horarios.get(i).getEntrada().substring(3, 5));
                    salida1 = Double.parseDouble(horarios.get(i).getSalida().substring(0, 2) + "." + horarios.get(i).getSalida().substring(3, 5));
                    entrada2 = Double.parseDouble(horarios.get(j).getEntrada().substring(0, 2) + "." + horarios.get(j).getEntrada().substring(3, 5));
                    salida2 = Double.parseDouble(horarios.get(j).getSalida().substring(0, 2) + "." + horarios.get(j).getSalida().substring(3, 5));
                    if (entrada2 >= entrada1 && entrada2 <= salida1) {
                        prueba = false;
                        txtlog.setText(txtlog.getText() + "Error Por grupos\n"
                                + String.valueOf(jTDatosExcel.getValueAt(i, 1)) + " -> " + String.valueOf(jTDatosExcel.getValueAt(i, 5)) + " " + String.valueOf(jTDatosExcel.getValueAt(i, 7)) + " " + String.valueOf(jTDatosExcel.getValueAt(i, 8))
                                + " y "
                                + String.valueOf(jTDatosExcel.getValueAt(j, 1)) + " -> " + String.valueOf(jTDatosExcel.getValueAt(j, 5)) + " " + String.valueOf(jTDatosExcel.getValueAt(j, 7)) + " " + String.valueOf(jTDatosExcel.getValueAt(j, 8)) + "\n\n");
                        //System.out.println("horarios cruzados");
                    }
                }
            }
        }
        return prueba;
    }
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        if (jTDatosExcel.getSelectedRow() != -1) {
            ((DefaultTableModel) jTDatosExcel.getModel()).removeRow(jTDatosExcel.getSelectedRow());
        } else {
            Mensaje.error(this, "No se pudo eliminar la celda");
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed

        if (tipoExcel.equalsIgnoreCase("horario")) {

            horarios = guardaExcel();
            horariosBD = new ArrayList(ConsultasObjetos.consultaMuchos("horarios", "id_grupo", String.valueOf(busquedaBinariaRetID(String.valueOf(jTDatosExcel.getValueAt(0, 4)), "grupo")),
                    "id_periodo", String.valueOf(busquedaBinariaRetID(String.valueOf(jTDatosExcel.getValueAt(0, 5)), "periodo")), null, ConectarBase.conectado()));
            System.out.println("hasta aqui llego");
        }
        jCheckExcel.setSelected(comparaGrupos());
        jCheckProfesores.setSelected(evaluaProfesores());
        jCheckMateriasBD.setSelected(evaluaGruposBD());

        if (jCheckExcel.isSelected() && jCheckProfesores.isSelected() && jCheckMateriasBD.isSelected()) {
            btnCarga.setEnabled(true);
        } else {
            btnCarga.setEnabled(false);
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    public boolean evaluaProfesores() {
        boolean prueba = true;
        double entrada1, entrada2, salida1, salida2;
        horariosBD = new ArrayList(ConsultasObjetos.consultaMuchos("horarios", null, null, null, null, null,ConectarBase.conectado()));
        horarios = guardaExcel();

        for (int i = 0; i < horarios.size(); i++) {
            for (int j = 0; j < horariosBD.size(); j++) {
                System.out.println("i: " + i);
                System.out.println("j: " + j);
                if (horarios.get(i).getRfc().equalsIgnoreCase(horariosBD.get(j).getRfc()) && horarios.get(i).getDia().equals(horariosBD.get(j).getDia())) {

                    entrada1 = Double.parseDouble(horarios.get(i).getEntrada().substring(0, 2) + "." + horarios.get(i).getEntrada().substring(3, 5));
                    salida1 = Double.parseDouble(horarios.get(i).getSalida().substring(0, 2) + "." + horarios.get(i).getSalida().substring(3, 5));
                    entrada2 = Double.parseDouble(horariosBD.get(j).getEntrada().substring(0, 2) + "." + horariosBD.get(j).getEntrada().substring(3, 5));
                    salida2 = Double.parseDouble(horariosBD.get(j).getSalida().substring(0, 2) + "." + horariosBD.get(j).getSalida().substring(3, 5));
                    System.out.println("horario1 " + entrada1 + " " + salida1);
                    System.out.println("horario2 " + entrada2 + " " + salida2);
                    System.out.println("mismo dia ");
                    if (entrada2 >= entrada1 && entrada2 <= salida1) {
                        prueba = false;
                        txtlog.setText(txtlog.getText() + "Error Por Profesores\n"
                                + String.valueOf(jTDatosExcel.getValueAt(i, 1)) + " -> " + String.valueOf(jTDatosExcel.getValueAt(i, 6)) + " " + String.valueOf(jTDatosExcel.getValueAt(i, 6)) + " " + String.valueOf(jTDatosExcel.getValueAt(i, 8))
                                + " y "
                                + busquedaBinariaRetNombre(horariosBD.get(j).getClaveMateria(), "materias") + "-> " + ControladorHorarios.numdia(Integer.valueOf(horariosBD.get(j).getDia())) + " " + horariosBD.get(j).getEntrada() + " " + horariosBD.get(j).getSalida() + "\n\n");

                        System.out.println("Profesor: " + String.valueOf(jTDatosExcel.getValueAt(i, 2)) + "cruzado " + horarios.get(i).getDia() + " " + horarios.get(i).getEntrada() + " " + horarios.get(i).getSalida());
                        System.out.println("Con id: " + horariosBD.get(j).getIdHorario() + " " + horariosBD.get(j).getDia() + " " + horariosBD.get(j).getEntrada() + " " + horariosBD.get(j).getSalida());

                        //txtconsulta.setText(txtconsulta.getText() + "Error en Grupos: " + String.valueOf(jTDatosExcel.getValueAt(i, 0)) + " -> " + String.valueOf(jTDatosExcel.getValueAt(i, 3)) + " y " + String.valueOf(jTDatosExcel.getValueAt(j, 0)) + " -> " + String.valueOf(jTDatosExcel.getValueAt(i, 3)) + "\n\n");
                        //System.out.println("horarios cruzados");
                    }

//                    System.out.println("ProfesorLoc:" + horarios.get(i).getDia() + " " + horarios.get(i).getEntrada() + " " + horarios.get(i).getSalida());
//                    System.out.println("ProfesorBD:" + horariosBD.get(j).getDia() + " " + horariosBD.get(j).getEntrada() + " " + horariosBD.get(j).getSalida());
                }
            }
        }
        return prueba;
    }

    public boolean evaluaGruposBD() {
        boolean prueba = true;
        double entrada1, entrada2, salida1, salida2;
        horariosBD = new ArrayList(ConsultasObjetos.consultaMuchos("horarios", null, null, null, null, null, ConectarBase.conectado()));
        horarios = guardaExcel();
        for (int i = 0; i < horarios.size(); i++) {
            for (int j = 0; j < horariosBD.size(); j++) {
                if (horarios.get(i).getClaveMateria().equalsIgnoreCase(horariosBD.get(j).getClaveMateria()) && horarios.get(i).getDia().equalsIgnoreCase(horariosBD.get(j).getDia())
                        && horarios.get(i).getIdGrupo().equals(horariosBD.get(j).getIdGrupo())) {
                    entrada1 = Double.parseDouble(horarios.get(i).getEntrada().substring(0, 2) + "." + horarios.get(i).getEntrada().substring(3, 5));
                    salida1 = Double.parseDouble(horarios.get(i).getSalida().substring(0, 2) + "." + horarios.get(i).getSalida().substring(3, 5));
                    entrada2 = Double.parseDouble(horariosBD.get(j).getEntrada().substring(0, 2) + "." + horariosBD.get(j).getEntrada().substring(3, 5));
                    salida2 = Double.parseDouble(horariosBD.get(j).getSalida().substring(0, 2) + "." + horariosBD.get(j).getSalida().substring(3, 5));
                    if (entrada2 >= entrada1 && entrada2 <= salida1) {
                        prueba = false;
                        txtlog.setText(txtlog.getText() + "Error en materia BD\n"
                                + String.valueOf(jTDatosExcel.getValueAt(i, 1)) + " -> " + String.valueOf(jTDatosExcel.getValueAt(i, 6)) + " " + String.valueOf(jTDatosExcel.getValueAt(i, 6)) + " " + String.valueOf(jTDatosExcel.getValueAt(i, 8))
                                + " y "
                                + busquedaBinariaRetNombre(horariosBD.get(j).getClaveMateria(), "materias") + "-> " + ControladorHorarios.numdia(Integer.valueOf(horariosBD.get(j).getDia())) + " " + horariosBD.get(j).getEntrada() + " " + horariosBD.get(j).getSalida() + "\n\n");
                        //System.out.println("Profesor: " + String.valueOf(jTDatosExcel.getValueAt(i, 2)) + "cruzado " + horarios.get(i).getDia() + " " + horarios.get(i).getEntrada() + " " + horarios.get(i).getSalida());
                        //System.out.println("Con id: " + horariosBD.get(j).getIdHorario() + " " + horariosBD.get(j).getDia() + " " + horariosBD.get(j).getEntrada() + " " + horariosBD.get(j).getSalida());

                        //txtconsulta.setText(txtconsulta.getText() + "Error en Grupos: " + String.valueOf(jTDatosExcel.getValueAt(i, 0)) + " -> " + String.valueOf(jTDatosExcel.getValueAt(i, 3)) + " y " + String.valueOf(jTDatosExcel.getValueAt(j, 0)) + " -> " + String.valueOf(jTDatosExcel.getValueAt(i, 3)) + "\n\n");
                        //System.out.println("horarios cruzados");
                    }

//                    System.out.println("ProfesorLoc:" + horarios.get(i).getDia() + " " + horarios.get(i).getEntrada() + " " + horarios.get(i).getSalida());
//                    System.out.println("ProfesorBD:" + horariosBD.get(j).getDia() + " " + horariosBD.get(j).getEntrada() + " " + horariosBD.get(j).getSalida());
                }
            }
        }
        return prueba;
    }

    public boolean evaluaLlaves() {
        boolean prueba = true;
        double entrada1, entrada2, salida1, salida2;
        ordenamientoBurbujaID("materia");
        horariosBD = new ArrayList(ConsultasObjetos.consultaMuchos("horarios", null, null, null, null, ConectarBase.conectado()));
        horarios = guardaExcel();
        for (int i = 0; i < horarios.size(); i++) {
            System.out.println("registro "+ i);
            if (busquedaBinariaRetID(String.valueOf(jTDatosExcel.getValueAt(i,4)), "grupo") == -1) {
                System.out.println("Grupos no encotrados");
            } 
            if (busquedaBinariaRetID(String.valueOf(jTDatosExcel.getValueAt(i,5)), "periodo") == -1) {
                System.out.println("periodo no encontrado");
            } 
            if (busquedaBinariaBuscaID(String.valueOf(jTDatosExcel.getValueAt(i, 0)), "materia") == null) {
                System.out.println("Materia no encontrado");
            } 
            if (busquedaBinariaBuscaID(String.valueOf(jTDatosExcel.getValueAt(i, 2)), "profesor") == null) {
                System.out.println("profesor no encontrado");
            }
            

        }
        return prueba;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VistaExcel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VistaExcel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VistaExcel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VistaExcel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VistaExcel().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCarga;
    public javax.swing.JButton btnExportar;
    public javax.swing.JButton btnImportar;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton5;
    private javax.swing.JCheckBox jCheckExcel;
    private javax.swing.JCheckBox jCheckLllaves;
    private javax.swing.JCheckBox jCheckMateriasBD;
    private javax.swing.JCheckBox jCheckProfesores;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    public javax.swing.JTable jTDatosExcel;
    private javax.swing.JTextField txtidentifica;
    private javax.swing.JTextArea txtlog;
    // End of variables declaration//GEN-END:variables

    public void ordenamientoBurbujaID(String tipo) {
        switch (tipo) {
            case "grupo":
                Grupo grup;
                for (int i = 2; i < grupos.size(); i++) {
                    for (int j = 0; j < grupos.size() - i; j++) {
                        if (Integer.valueOf(grupos.get(j).getIdGrupo()) > Integer.valueOf(grupos.get(j + 1).getIdGrupo())) {
                            grup = grupos.get(j);
                            grupos.set(j, grupos.get(j + 1));
                            grupos.set(j + 1, grup);
                        }
                    }
                }
                break;
            case "licenciatura":
                Licenciatura lic;
                for (int i = 2; i < carreras.size(); i++) {
                    for (int j = 0; j < carreras.size() - i; j++) {
                        if (carreras.get(j).getIdLicenciatura().compareToIgnoreCase(carreras.get(j + 1).getIdLicenciatura()) > 0) {
                            lic = carreras.get(j);
                            carreras.set(j, carreras.get(j + 1));
                            carreras.set(j + 1, lic);
                        }
                    }
                }
                break;

            case "materia":
                Materia mat;
                for (int i = 2; i < materias.size(); i++) {
                    for (int j = 0; j < materias.size() - i; j++) {
                        if (materias.get(j).getClaveCarrera().compareToIgnoreCase(materias.get(j + 1).getClaveCarrera()) > 0) {
                            mat = materias.get(j);
                            materias.set(j, materias.get(j + 1));
                            materias.set(j + 1, mat);
                        }
                    }
                }

                break;
        }
    }

    public void ordenamientoBurbujaNombre(String tipo) {
        switch (tipo) {
            case "grupo":
                Grupo grup;
                for (int i = 2; i < grupos.size(); i++) {
                    for (int j = 0; j < grupos.size() - i; j++) {
                        if (grupos.get(j).getNombreGrupo().compareToIgnoreCase(grupos.get(j + 1).getNombreGrupo()) > 0) {
                            grup = grupos.get(j);
                            grupos.set(j, grupos.get(j + 1));
                            grupos.set(j + 1, grup);
                        }
                    }
                }
                break;
            //esta por id
            case "licenciatura":
                Licenciatura lic;
                for (int i = 2; i < carreras.size(); i++) {
                    for (int j = 0; j < carreras.size() - i; j++) {
                        if (carreras.get(j).getIdLicenciatura().compareToIgnoreCase(carreras.get(j + 1).getIdLicenciatura()) > 0) {
                            lic = carreras.get(j);
                            carreras.set(j, carreras.get(j + 1));
                            carreras.set(j + 1, lic);
                        }
                    }
                }
                break;

            case "materia":
                Materia mat;
                for (int i = 2; i < materias.size(); i++) {
                    for (int j = 0; j < materias.size() - i; j++) {
                        if (materias.get(j).getUnidadAprendizaje().compareToIgnoreCase(materias.get(j + 1).getUnidadAprendizaje()) > 0) {
                            mat = materias.get(j);
                            materias.set(j, materias.get(j + 1));
                            materias.set(j + 1, mat);
                        }
                    }
                }

                break;
        }
    }

    public int busquedaBinariaRetID(String dato, String tipo) {
        int n, inf = 0, sup, centro;
        switch (tipo) {
            case "licenciatura":
                n = carreras.size();
                sup = n - 1;
                while (inf <= sup) {
                    centro = (sup + inf) / 2;
                    if (carreras.get(centro).getLicenciatura().equalsIgnoreCase(dato)) {
                        return Integer.parseInt(carreras.get(centro).getIdLicenciatura());
                    } else if (dato.compareToIgnoreCase(carreras.get(centro).getLicenciatura()) > 0) {
                        sup = centro - 1;
                    } else {
                        inf = centro + 1;
                    }
                }
                break;
            case "grupo":
                n = grupos.size();
                sup = n - 1;
                while (inf <= sup) {
                    centro = (sup + inf) / 2;
                    if (grupos.get(centro).getNombreGrupo().equalsIgnoreCase(dato)) {
                        return Integer.valueOf(grupos.get(centro).getIdGrupo());
                    } else if (dato.compareToIgnoreCase(grupos.get(centro).getNombreGrupo()) < 0) {

                        sup = centro - 1;
                    } else {
                        inf = centro + 1;
                    }
                }
                break;
            case "periodo":
                n = periodos.size();
                sup = n - 1;
                while (inf <= sup) {
                    centro = (sup + inf) / 2;
                    if (periodos.get(centro).getPeriodo().equalsIgnoreCase(dato)) {
                        return Integer.valueOf(grupos.get(centro).getIdGrupo());
                    } else if (dato.compareToIgnoreCase(periodos.get(centro).getPeriodo()) < 0) {
                        sup = centro - 1;
                    } else {
                        inf = centro + 1;
                    }
                }
                break;
            case "materia":
                n = materias.size();
                sup = n - 1;
                while (inf <= sup) {
                    centro = (sup + inf) / 2;
                    if (materias.get(centro).getUnidadAprendizaje().equalsIgnoreCase(dato)) {
                        return Integer.valueOf(materias.get(centro).getClaveMateria().replaceAll(" ", "").trim().trim());
                    } else if (dato.compareToIgnoreCase(materias.get(centro).getUnidadAprendizaje()) < 0) {
                        sup = centro - 1;
                    } else {
                        inf = centro + 1;
                    }
                }
                break;
        }
        return -1;
    }

    public String busquedaBinariaBuscaID(String id, String tipo) {
        int n, inf = 0, sup, centro;
        switch (tipo) {
            case "profesor":
                n = profes.size();
                sup = n - 1;
                while (inf <= sup) {
                    centro = (sup + inf) / 2;
                    if (profes.get(centro).getRfc().equalsIgnoreCase(id)) {
                        return profes.get(centro).getRfc();
                    } else if (id.compareToIgnoreCase(profes.get(centro).getRfc()) < 0) {
                        sup = centro - 1;
                    } else {
                        inf = centro + 1;
                    }
                }
                break;
            case "materia":
                n = materias.size();
                sup = n - 1;
                while (inf <= sup) {
                    centro = (sup + inf) / 2;
                    if (materias.get(centro).getClaveMateria().equalsIgnoreCase(id)) {
                        return materias.get(centro).getClaveMateria();
                    } else if (id.compareToIgnoreCase(materias.get(centro).getClaveMateria()) < 0) {
                        sup = centro - 1;
                    } else {
                        inf = centro + 1;
                    }
                }
                break;
        }
        return null;
    }

    public String busquedaBinariaRetNombre(int dato, String tipo) {
        int n, inf = 0, sup, centro;
        switch (tipo) {
            case "licenciatura":
                n = carreras.size();
                sup = n - 1;
                while (inf <= sup) {
                    centro = (sup + inf) / 2;
                    if (Integer.parseInt(carreras.get(centro).getIdLicenciatura()) == dato) {
                        return carreras.get(centro).getLicenciatura();
                    } else if (dato < Integer.valueOf(carreras.get(centro).getIdLicenciatura())) {
                        sup = centro - 1;
                    } else {
                        inf = centro + 1;
                    }
                }
            case "grupo":
                n = grupos.size();
                sup = n - 1;
                while (inf <= sup) {
                    centro = (sup + inf) / 2;
                    if (Integer.valueOf(grupos.get(centro).getIdGrupo()) == dato) {
                        return grupos.get(centro).getNombreGrupo();
                    } else if (dato < Integer.valueOf(grupos.get(centro).getIdGrupo())) {
                        sup = centro - 1;
                    } else {
                        inf = centro + 1;
                    }
                }
        }
        return "";
    }

    public void muestraHorarios(PeriodoHorarios horario) {
        System.out.println("Materia " + horario.getClaveMateria());
        System.out.println("RFC " + horario.getRfc());
        System.out.println("Grupo " + horario.getIdGrupo());
        System.out.println("Periodo " + horario.getIdPeriodo());
        System.out.println("Dia " + horario.getDia());
        System.out.println("Entrada " + horario.getEntrada());
        System.out.println("Salida " + horario.getSalida());
    }

    public String busquedaBinariaRetNombre(String dato, String tipo) {
        ordenamientoBurbujaID("materia");
        int n, inf = 0, sup, centro;
        switch (tipo) {
            case "materias":
                n = materias.size();
                sup = n - 1;
                while (inf <= sup) {
                    centro = (sup + inf) / 2;
                    if (materias.get(centro).getClaveMateria().equalsIgnoreCase(dato)) {
                        return materias.get(centro).getClaveMateria();
                    } else if (dato.compareToIgnoreCase(materias.get(centro).getClaveMateria()) < 0) {
                        sup = centro - 1;
                    } else {
                        inf = centro + 1;
                    }
                }
//            case "grupo":
//                n = grupos.size();
//                sup = n - 1;
//                while (inf <= sup) {
//                    centro = (sup + inf) / 2;
//                    if (Integer.valueOf(grupos.get(centro).getIdGrupo()) == dato) {
//                        return grupos.get(centro).getNombreGrupo();
//                    } else if (dato < Integer.valueOf(grupos.get(centro).getIdGrupo())) {
//                        sup = centro - 1;
//                    } else {
//                        inf = centro + 1;
//                    }
//                }
        }
        return "";
    }

}
