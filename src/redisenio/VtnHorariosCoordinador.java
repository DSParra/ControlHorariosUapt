/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package redisenio;

import Clases.Archivo;
import Clases.ConectarBase;
import Clases.ConsultasObjetos;
import Clases.Valida;
import Controlador.ControladorHorarios;
import Objetos.Grupo;
import Objetos.Licenciatura;
import Objetos.Materia;
import Objetos.PeriodoHorarios;
import Objetos.PlanEstudios;
import Objetos.Profesor;
import Objetos.periodoEscolar;
import app.VentanaLogin;
import cjb.ci.CtrlInterfaz;
import cjb.ci.Mensaje;
import cjb.ci.Validaciones;
import java.awt.event.ItemEvent;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author MoisesVidalHernandez
 */
public class VtnHorariosCoordinador extends javax.swing.JFrame {

    String cadena = "";
    int id = 0;
    private Boolean edicion = true;
    private DefaultTableModel modelo;
    private ArrayList<Object> lics = new ArrayList<>();
    private ArrayList<Object> periodos = new ArrayList<>();
    private ArrayList<Object> grupos = new ArrayList<>();
    private ArrayList<Object> grupos1 = new ArrayList<>();
    private ArrayList<Object> materias = new ArrayList<>();
    private ArrayList<Object> profesores = new ArrayList<>();
    private ArrayList<Object> plans = new ArrayList<>();
    private ArrayList<PeriodoHorarios> horariosBD = new ArrayList<>();
    Login login = new Login();
    ArrayList horarios = new ArrayList();

    /**
     * Creates new form VtnDocentes
     */
    public VtnHorariosCoordinador() {
        initComponents();
        this.setIconImage(new ImageIcon(getClass().getResource("/Iconos2/SCHR.png")).getImage());
        this.setExtendedState(MAXIMIZED_BOTH);
        tablaHorarios.getColumnModel().getColumn(0).setPreferredWidth(10);
        tablaHorarios.getColumnModel().getColumn(0).setResizable(false);
        tablaHorarios.getColumnModel().getColumn(1).setPreferredWidth(10);
        tablaHorarios.getColumnModel().getColumn(1).setResizable(false);
        tablaHorarios.getColumnModel().getColumn(2).setPreferredWidth(120);
        tablaHorarios.getColumnModel().getColumn(2).setResizable(false);
        tablaHorarios.getColumnModel().getColumn(3).setPreferredWidth(60);
        tablaHorarios.getColumnModel().getColumn(3).setResizable(false);
        tablaHorarios.getColumnModel().getColumn(4).setPreferredWidth(120);
        tablaHorarios.getColumnModel().getColumn(4).setResizable(false);
        tablaHorarios.getColumnModel().getColumn(5).setPreferredWidth(30);
        tablaHorarios.getColumnModel().getColumn(5).setResizable(false);
        tablaHorarios.getColumnModel().getColumn(6).setPreferredWidth(30);
        tablaHorarios.getColumnModel().getColumn(6).setResizable(false);
        tablaHorarios.getColumnModel().getColumn(7).setPreferredWidth(50);
        tablaHorarios.getColumnModel().getColumn(7).setResizable(false);
        tablaHorarios.getColumnModel().getColumn(8).setPreferredWidth(10);
        tablaHorarios.getColumnModel().getColumn(8).setResizable(false);
        tablaHorarios.getColumnModel().getColumn(9).setPreferredWidth(10);
        tablaHorarios.getColumnModel().getColumn(9).setResizable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        panelCaptura = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        labelnombre = new javax.swing.JLabel();
        labelnombre1 = new javax.swing.JLabel();
        labelnombre2 = new javax.swing.JLabel();
        labelnombre3 = new javax.swing.JLabel();
        labelnombre4 = new javax.swing.JLabel();
        labelnombre5 = new javax.swing.JLabel();
        labelnombre6 = new javax.swing.JLabel();
        txtMatricula = new javax.swing.JTextField();
        txtHoraEntrada = new javax.swing.JTextField();
        txtHoraSalida = new javax.swing.JTextField();
        btnNuevo = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnModificar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        comboPlanes = new javax.swing.JComboBox<>();
        comboPeriodo = new javax.swing.JComboBox<>();
        comboGrupo = new javax.swing.JComboBox<>();
        comboMateria = new javax.swing.JComboBox<>();
        labelnombre9 = new javax.swing.JLabel();
        comboTipo = new javax.swing.JComboBox<>();
        labelnombre11 = new javax.swing.JLabel();
        comboDocente = new javax.swing.JComboBox<>();
        comboDia = new javax.swing.JComboBox<>();
        panelConsulta1 = new javax.swing.JPanel();
        panelFiltros = new javax.swing.JPanel();
        panelBusqeuda = new javax.swing.JPanel();
        labelnombre8 = new javax.swing.JLabel();
        labelnombre7 = new javax.swing.JLabel();
        comboGrupoBusqueda = new javax.swing.JComboBox<>();
        comboPeriodoBusqueda = new javax.swing.JComboBox<>();
        panelTabla = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaHorarios = new javax.swing.JTable();
        panelEXportacion = new javax.swing.JPanel();
        labelnombre10 = new javax.swing.JLabel();
        txtNombreArchivo = new javax.swing.JTextField();
        btnExportar = new javax.swing.JButton();
        btnRegresar = new javax.swing.JButton();
        btnCerrar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtInconsistencias = new javax.swing.JTextArea();
        labelnombre12 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(new java.awt.GridBagLayout());

        panelCaptura.setBackground(new java.awt.Color(255, 255, 255));
        panelCaptura.setLayout(new java.awt.GridBagLayout());

        jPanel1.setBackground(new java.awt.Color(0, 51, 0));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        labelnombre.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelnombre.setForeground(new java.awt.Color(255, 255, 255));
        labelnombre.setText("MATRICULA");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(labelnombre, gridBagConstraints);

        labelnombre1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelnombre1.setForeground(new java.awt.Color(255, 255, 255));
        labelnombre1.setText("PERIODO");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(labelnombre1, gridBagConstraints);

        labelnombre2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelnombre2.setForeground(new java.awt.Color(255, 255, 255));
        labelnombre2.setText("PLAN ESTUDIOS");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(labelnombre2, gridBagConstraints);

        labelnombre3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelnombre3.setForeground(new java.awt.Color(255, 255, 255));
        labelnombre3.setText("GRUPO");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(labelnombre3, gridBagConstraints);

        labelnombre4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelnombre4.setForeground(new java.awt.Color(255, 255, 255));
        labelnombre4.setText("MATERIA");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(labelnombre4, gridBagConstraints);

        labelnombre5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelnombre5.setForeground(new java.awt.Color(255, 255, 255));
        labelnombre5.setText("DOCENTE");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(labelnombre5, gridBagConstraints);

        labelnombre6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelnombre6.setForeground(new java.awt.Color(255, 255, 255));
        labelnombre6.setText("DIA");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(labelnombre6, gridBagConstraints);

        txtMatricula.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtMatriculaFocusLost(evt);
            }
        });
        txtMatricula.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtMatriculaKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(txtMatricula, gridBagConstraints);

        txtHoraEntrada.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtHoraEntradaKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 15;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(txtHoraEntrada, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 17;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(txtHoraSalida, gridBagConstraints);

        btnNuevo.setBackground(new java.awt.Color(102, 102, 0));
        btnNuevo.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnNuevo.setForeground(new java.awt.Color(255, 255, 255));
        btnNuevo.setText("NUEVO");
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 18;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(btnNuevo, gridBagConstraints);

        btnEliminar.setBackground(new java.awt.Color(102, 102, 0));
        btnEliminar.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnEliminar.setForeground(new java.awt.Color(255, 255, 255));
        btnEliminar.setText("ELIMINAR");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 19;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(btnEliminar, gridBagConstraints);

        btnModificar.setBackground(new java.awt.Color(102, 102, 0));
        btnModificar.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnModificar.setForeground(new java.awt.Color(255, 255, 255));
        btnModificar.setText("MODIFICAR");
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 20;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(btnModificar, gridBagConstraints);

        btnCancelar.setBackground(new java.awt.Color(102, 102, 0));
        btnCancelar.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnCancelar.setForeground(new java.awt.Color(255, 255, 255));
        btnCancelar.setText("CANCELAR");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 21;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(btnCancelar, gridBagConstraints);

        comboPlanes.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboPlanesItemStateChanged(evt);
            }
        });
        comboPlanes.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                comboPlanesKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(comboPlanes, gridBagConstraints);

        comboPeriodo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                comboPeriodoKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(comboPeriodo, gridBagConstraints);

        comboGrupo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                comboGrupoKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(comboGrupo, gridBagConstraints);

        comboMateria.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                comboMateriaKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(comboMateria, gridBagConstraints);

        labelnombre9.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelnombre9.setForeground(new java.awt.Color(255, 255, 255));
        labelnombre9.setText("HORA DE ENTRADA");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(labelnombre9, gridBagConstraints);

        comboTipo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "OBLIGATORIA", "OPTATIVA" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 17;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(comboTipo, gridBagConstraints);

        labelnombre11.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelnombre11.setForeground(new java.awt.Color(255, 255, 255));
        labelnombre11.setText("HORA DE SALIDA");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 16;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(labelnombre11, gridBagConstraints);

        comboDocente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                comboDocenteKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(comboDocente, gridBagConstraints);

        comboDia.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "LUNES", "MARTES", "MIERCOLES", "JUEVES", "VIERNES", "SABADO" }));
        comboDia.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                comboDiaKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(comboDia, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        panelCaptura.add(jPanel1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.2;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(panelCaptura, gridBagConstraints);

        panelConsulta1.setLayout(new java.awt.GridBagLayout());

        panelFiltros.setBackground(new java.awt.Color(255, 204, 204));
        panelFiltros.setLayout(new java.awt.GridBagLayout());

        panelBusqeuda.setBackground(new java.awt.Color(255, 255, 255));
        panelBusqeuda.setLayout(new java.awt.GridBagLayout());

        labelnombre8.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        labelnombre8.setText("GESTION HORARIOS");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        panelBusqeuda.add(labelnombre8, gridBagConstraints);

        labelnombre7.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelnombre7.setText("PARA BUSCAR UN HORARIO SELECCIONE UN GURPO Y UN PERIODO");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        panelBusqeuda.add(labelnombre7, gridBagConstraints);

        comboGrupoBusqueda.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2021A", "2021B" }));
        comboGrupoBusqueda.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboGrupoBusquedaItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        panelBusqeuda.add(comboGrupoBusqueda, gridBagConstraints);

        comboPeriodoBusqueda.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2021A", "2021B" }));
        comboPeriodoBusqueda.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboPeriodoBusquedaItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        panelBusqeuda.add(comboPeriodoBusqueda, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.1;
        panelFiltros.add(panelBusqeuda, gridBagConstraints);

        panelTabla.setLayout(new java.awt.GridBagLayout());

        tablaHorarios.setBackground(new java.awt.Color(255, 255, 204));
        tablaHorarios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "CLAVE MATERIA", "MATERIA", "RFC", "PROFESOR", "GRUPO", "PERIODO", "DIA", "ENTRADA", "SALIDA"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaHorarios.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaHorariosMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tablaHorarios);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        panelTabla.add(jScrollPane2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        panelFiltros.add(panelTabla, gridBagConstraints);

        panelEXportacion.setBackground(new java.awt.Color(0, 51, 0));
        panelEXportacion.setLayout(new java.awt.GridBagLayout());

        labelnombre10.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelnombre10.setForeground(new java.awt.Color(255, 255, 255));
        labelnombre10.setText("SI DESEA EXPORTAR ARCHIVO EXCEL, ESCRIBA UN NOMBRE");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        panelEXportacion.add(labelnombre10, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        panelEXportacion.add(txtNombreArchivo, gridBagConstraints);

        btnExportar.setBackground(new java.awt.Color(102, 102, 0));
        btnExportar.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnExportar.setForeground(new java.awt.Color(255, 255, 255));
        btnExportar.setText("EXPORTAR");
        btnExportar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        panelEXportacion.add(btnExportar, gridBagConstraints);

        btnRegresar.setBackground(new java.awt.Color(102, 102, 0));
        btnRegresar.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnRegresar.setForeground(new java.awt.Color(255, 255, 255));
        btnRegresar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos2/flecha(2).png"))); // NOI18N
        btnRegresar.setText("REGRESAR AL MENU");
        btnRegresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegresarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        panelEXportacion.add(btnRegresar, gridBagConstraints);

        btnCerrar.setBackground(new java.awt.Color(153, 0, 0));
        btnCerrar.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnCerrar.setForeground(new java.awt.Color(255, 255, 255));
        btnCerrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos2/flecha(3).png"))); // NOI18N
        btnCerrar.setText("SALIR");
        btnCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCerrarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        panelEXportacion.add(btnCerrar, gridBagConstraints);

        txtInconsistencias.setBackground(new java.awt.Color(255, 204, 204));
        txtInconsistencias.setColumns(20);
        txtInconsistencias.setRows(5);
        jScrollPane1.setViewportView(txtInconsistencias);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        panelEXportacion.add(jScrollPane1, gridBagConstraints);

        labelnombre12.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelnombre12.setForeground(new java.awt.Color(255, 255, 255));
        labelnombre12.setText("INCONSISTENCIAS");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        panelEXportacion.add(labelnombre12, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.1;
        panelFiltros.add(panelEXportacion, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        panelConsulta1.add(panelFiltros, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(panelConsulta1, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCerrarActionPerformed
        this.setVisible(false);
        new Login().setVisible(true);
    }//GEN-LAST:event_btnCerrarActionPerformed

    private void btnRegresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegresarActionPerformed
        this.setVisible(false);
        new VtnMenuCoordinador().setVisible(true);
    }//GEN-LAST:event_btnRegresarActionPerformed

    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed
        if (!edicion)
        {
            edicion();
            btnNuevo.setText("ACEPTAR");
            CtrlInterfaz.limpia(txtHoraEntrada, txtHoraSalida, txtMatricula);
            CtrlInterfaz.habilita(true, txtHoraSalida, txtHoraEntrada, txtMatricula, comboPeriodo, comboPlanes, comboGrupo, comboMateria, comboDocente, comboDia, btnCancelar);
            CtrlInterfaz.habilita(false, btnEliminar, btnModificar, btnExportar);
            CtrlInterfaz.selecciona(txtMatricula);
        } else
        {
            PeriodoHorarios horario = new PeriodoHorarios(0, buscaMateria(null, comboMateria.getSelectedItem().toString()), buscaGrupo(null, comboGrupo.getSelectedItem().toString()), buscaPeriodo(null, comboPeriodo.getSelectedItem().toString()), buscaProfesor(null, comboDocente.getSelectedItem().toString()), String.valueOf(ControladorHorarios.numdia(comboDia.getSelectedItem().toString())), txtHoraEntrada.getText(), txtHoraSalida.getText());
            String mensaje = ControladorHorarios.insertaHorarioUnico(horario);
            boolean var;
            boolean var2, registro;
            if (mensaje.equals("operacion exitosa"))
            {
                var = comparaGrupos(horario);
                var2 = comparaProfesores(horario);
                if (var == false)
                {
                    Mensaje.error(this, "Corrija las horas de entrada y salida de la materia que quiere asignar en este grupo");
                } else
                {
                    if (var2 == false)
                    {
                        Mensaje.error(this, "Corrija el horario en el que el docente impartira la materia");
                    } else
                    {
                        registro = ControladorHorarios.insertaEnBaseUnicoHorario(horario);
                        if (registro == false)
                        {
                            Mensaje.exito(this, "Horario registrado correctamente");
                            btnNuevo.setText("NUEVO");
                            CtrlInterfaz.limpia(txtHoraEntrada, txtHoraSalida, txtMatricula);
                            CtrlInterfaz.habilita(false, txtHoraSalida, txtHoraEntrada, txtMatricula, comboPeriodo, comboPlanes, comboGrupo, comboMateria, comboDocente, comboDia, btnCancelar);
                            CtrlInterfaz.habilita(true, btnNuevo, btnEliminar, btnModificar, btnExportar);
                            importarBD();
                            comboGrupoBusqueda.setSelectedIndex(0);
                            actualizaTabla(1);
                            edicion();
                            CtrlInterfaz.limpia(txtMatricula, txtHoraEntrada, txtHoraSalida);
                        } else
                        {
                            Mensaje.error(this, "No se pudo registrar el horario");
                        }
                    }
                }
            } else
            {
                JOptionPane.showMessageDialog(rootPane, mensaje);
            }

        }
    }//GEN-LAST:event_btnNuevoActionPerformed

    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed
        if (txtMatricula.getText().compareTo("") == 0)
        {
            Mensaje.error(this, "No ha seleccionado nungun registro");
        } else
        {
            if (!edicion)
            {
                edicion();
                btnModificar.setText("ACEPTAR");
                CtrlInterfaz.habilita(true, txtHoraSalida, txtHoraEntrada, comboPeriodo, comboPlanes, comboGrupo, comboMateria, comboDocente, comboDia, btnCancelar);
                CtrlInterfaz.habilita(false, btnEliminar, btnNuevo, btnExportar);

            } else
            {
                PeriodoHorarios horario = new PeriodoHorarios(Integer.parseInt(txtMatricula.getText()), buscaMateria(null, comboMateria.getSelectedItem().toString()), buscaGrupo(null, comboGrupo.getSelectedItem().toString()), buscaPeriodo(null, comboPeriodo.getSelectedItem().toString()), buscaProfesor(null, comboDocente.getSelectedItem().toString()), String.valueOf(ControladorHorarios.numdia(comboDia.getSelectedItem().toString())), txtHoraEntrada.getText(), txtHoraSalida.getText());
                String mensaje = ControladorHorarios.modificaHorarioUnico(horario, Integer.parseInt(txtMatricula.getText()));
                boolean var;
                boolean var2, registro;
                if (mensaje.equals("operacion exitosa"))
                {
                    var = comparaGrupos(horario);
                    var2 = comparaProfesores(horario);
                    if (var == false)
                    {
                        Mensaje.error(this, "Corrija las horas de entrada y salida de la materia que quiere asignar en este grupo");
                    } else
                    {
                        if (var2 == false)
                        {
                            Mensaje.error(this, "Corrija el horario en el que el docente impartira la materia");
                        } else
                        {
                            registro = ControladorHorarios.modificaEnBaseUnicoHorario(horario, Integer.parseInt(txtMatricula.getText()));
                            if (registro != true)
                            {
                                Mensaje.exito(this, "Horario modificado correctamente");
                                btnModificar.setText("MODIFICAR");
                                CtrlInterfaz.limpia(txtHoraEntrada, txtHoraSalida, txtMatricula);
                                CtrlInterfaz.habilita(false, txtHoraSalida, txtHoraEntrada, txtMatricula, comboPeriodo, comboPlanes, comboGrupo, comboMateria, comboDocente, comboDia, btnCancelar);
                                CtrlInterfaz.habilita(true, btnNuevo, btnEliminar, btnModificar, btnExportar);
                                importarBD();
                                comboGrupoBusqueda.setSelectedIndex(0);
                                actualizaTabla(1);
                                edicion();
                                CtrlInterfaz.limpia(txtMatricula, txtHoraEntrada, txtHoraSalida);
                            } else
                            {
                                Mensaje.error(this, "No se pudo registrar el horario");
                            }
                        }
                    }
                } else
                {
                    JOptionPane.showMessageDialog(rootPane, mensaje);
                }
            }
        }
    }//GEN-LAST:event_btnModificarActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        cancelar();
        importarBD();
        llenaGruposFiltro();
        actualizaTabla(1);
        cargaPeriodos();
        llenaPlan();
        llenaGrupos();
        llenaMaterias();
        llenaDocentes();
    }//GEN-LAST:event_formWindowOpened

    private void tablaHorariosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaHorariosMouseClicked
        txtMatricula.setText(String.valueOf(modelo.getValueAt(tablaHorarios.getSelectedRow(), 0)));
        comboMateria.setSelectedIndex((buscarCombo((String) modelo.getValueAt(tablaHorarios.getSelectedRow(), 2), comboMateria)));
        String GrupoACombo = retornameLic((String) modelo.getValueAt(tablaHorarios.getSelectedRow(), 5));
        comboPlanes.setSelectedIndex((buscarCombo(buscaLic(GrupoACombo, null), comboPlanes)));
        comboGrupo.setSelectedIndex((buscarCombo((String) modelo.getValueAt(tablaHorarios.getSelectedRow(), 5), comboGrupo)));
        comboPeriodo.setSelectedIndex((buscarCombo((String) modelo.getValueAt(tablaHorarios.getSelectedRow(), 6), comboPeriodo)));
        comboDocente.setSelectedIndex((buscarCombo((String) modelo.getValueAt(tablaHorarios.getSelectedRow(), 4), comboDocente)));
        comboDia.setSelectedIndex((buscarCombo((String) modelo.getValueAt(tablaHorarios.getSelectedRow(), 7), comboDia)));
        txtHoraEntrada.setText((String) modelo.getValueAt(tablaHorarios.getSelectedRow(), 8));
        txtHoraSalida.setText((String) modelo.getValueAt(tablaHorarios.getSelectedRow(), 9));
    }//GEN-LAST:event_tablaHorariosMouseClicked

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        if (Mensaje.pregunta(this, "¿Seguro que desea eliminar este registro?") == 0)
        {
            String mensaje = Controlador.ControladorHorarios.eliminaHorario(txtMatricula.getText());
            if (mensaje.endsWith("operacion exitosa"))
            {
                importarBD();
                actualizaTabla(1);
                comboGrupoBusqueda.setSelectedIndex(0);
            } else
            {
                JOptionPane.showMessageDialog(rootPane, mensaje);
            }
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnExportarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportarActionPerformed
        if (txtNombreArchivo.getText() != null)
        {
            String mensaje = Archivo.Exportar(tablaHorarios, txtNombreArchivo.getText());
            if (mensaje.equals("Error en la Exportacion"))
            {
                Mensaje.error(this, mensaje);
            } else
            {
                Mensaje.exito(this, mensaje);
            }
        } else
        {
            Mensaje.error(this, "Escriba el nombre del archivo");
        }
    }//GEN-LAST:event_btnExportarActionPerformed

    private void comboGrupoBusquedaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboGrupoBusquedaItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED)
        {
            actualizaTabla(1);
            comboPeriodoBusqueda.setSelectedIndex(0);
        }
    }//GEN-LAST:event_comboGrupoBusquedaItemStateChanged

    private void comboPeriodoBusquedaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboPeriodoBusquedaItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED)
        {
            actualizaTabla(2);
        }
    }//GEN-LAST:event_comboPeriodoBusquedaItemStateChanged

    private void txtMatriculaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtMatriculaFocusLost
        Valida.convertirAMayusculas(txtMatricula);
    }//GEN-LAST:event_txtMatriculaFocusLost

    private void txtMatriculaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMatriculaKeyPressed
        Validaciones.enter(this, evt, comboPeriodo);
    }//GEN-LAST:event_txtMatriculaKeyPressed

    private void comboPeriodoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_comboPeriodoKeyPressed
        Validaciones.enter(this, evt, comboPlanes);
    }//GEN-LAST:event_comboPeriodoKeyPressed

    private void comboPlanesKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_comboPlanesKeyPressed
        Validaciones.enter(this, evt, comboGrupo);
    }//GEN-LAST:event_comboPlanesKeyPressed

    private void comboGrupoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_comboGrupoKeyPressed
        Validaciones.enter(this, evt, comboMateria);
    }//GEN-LAST:event_comboGrupoKeyPressed

    private void comboPlanesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboPlanesItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED)
        {
            llenaGrupos();
            llenaMaterias();
        }
    }//GEN-LAST:event_comboPlanesItemStateChanged

    private void comboMateriaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_comboMateriaKeyPressed
        Validaciones.enter(this, evt, comboDocente);
    }//GEN-LAST:event_comboMateriaKeyPressed

    private void comboDocenteKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_comboDocenteKeyPressed
        Validaciones.enter(this, evt, comboDia);
    }//GEN-LAST:event_comboDocenteKeyPressed

    private void comboDiaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_comboDiaKeyPressed
        Validaciones.enter(this, evt, txtHoraEntrada);
    }//GEN-LAST:event_comboDiaKeyPressed

    private void txtHoraEntradaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtHoraEntradaKeyPressed
        Validaciones.enter(this, evt, txtHoraSalida);
    }//GEN-LAST:event_txtHoraEntradaKeyPressed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        cancelar();
    }//GEN-LAST:event_btnCancelarActionPerformed

    public String buscaLic(String id, String licenciatura) {
        if (licenciatura != null)
        {
            for (Object l : lics)
            {
                Licenciatura lic = (Licenciatura) l;
                if ((lic.getLicenciatura()).equals(licenciatura))
                {
                    return lic.getIdLicenciatura();
                }
            }
        } else
        {
            for (Object l : lics)
            {
                Licenciatura lic = (Licenciatura) l;
                if (lic.getIdLicenciatura().equals(id))
                {
                    return lic.getLicenciatura();
                }
            }
        }
        return null;
    }

    private String buscaProfesor(String rfc, String profesor) {
        if (profesor != null)
        {
            for (Object p : profesores)
            {
                Profesor pr = (Profesor) p;
                if ((pr.getNombres() + " " + pr.getApellidoP() + " " + pr.getApellidoM()).equals(profesor))
                {
                    return pr.getRfc();
                }
            }
        } else
        {
            for (Object p : profesores)
            {
                Profesor pr = (Profesor) p;
                if ((pr.getRfc()).equals(rfc))
                {
                    return pr.getNombres() + " " + pr.getApellidoP() + " " + pr.getApellidoM();
                }
            }
        }
        return null;
    }

    public void actualizaTabla(int valor) {

        modelo = (DefaultTableModel) tablaHorarios.getModel();
        switch (valor)
        {
            case 1:
                if (horarios.isEmpty())
                {
                    Mensaje.error(this, "No se encuentran registros");
                } else
                {
                    modelo.setRowCount(0);
                    for (Object p : horarios)
                    {
                        PeriodoHorarios horario = (PeriodoHorarios) p;
                        if (horario.getIdGrupo().equals(buscaGrupo(null, comboGrupoBusqueda.getSelectedItem().toString())))
                        {
                            modelo.addRow(new Object[]
                            {
                                horario.getIdHorario(), horario.getClaveMateria(), buscaMateria(horario.getClaveMateria(), null), horario.getRfc(), buscaProfesor(horario.getRfc(), null), buscaGrupo(horario.getIdGrupo(), null), buscaPeriodo(horario.getIdPeriodo(), null), ControladorHorarios.numdia(Integer.parseInt(horario.getDia())), horario.getEntrada(), horario.getSalida()
                            });
                        }
                    }
                }

                break;
            case 2:
                if (comboPeriodoBusqueda.getSelectedIndex() == 0)
                {
                    actualizaTabla(1);
                } else
                {
                    //horarios = ConsultasObjetos.consultaMuchos("horarios", "id_grupo", buscaGrupoFiltro(null, jCGrupofiltro.getSelectedItem().toString()), "id_periodo", buscaPeriodo(null, jCPeriodoFiltro.getSelectedItem().toString()), "dia", ConectarBase.conectado());
                    if (horarios.isEmpty())
                    {
                        Mensaje.error(this, "No se encuentran registros");
                    } else
                    {
                        modelo.setRowCount(0);
                        for (Object p : horarios)
                        {
                            PeriodoHorarios horario = (PeriodoHorarios) p;
                            if (horario.getIdGrupo().equals(buscaGrupo(null, comboGrupoBusqueda.getSelectedItem().toString())) && horario.getIdPeriodo().equals(buscaPeriodo(null, comboPeriodoBusqueda.getSelectedItem().toString())))
                            {
                                modelo.addRow(new Object[]
                                {
                                    horario.getIdHorario(), horario.getClaveMateria(), buscaMateria(horario.getClaveMateria(), null), horario.getRfc(), buscaProfesor(horario.getRfc(), null), buscaGrupo(horario.getIdGrupo(), null), buscaPeriodo(horario.getIdPeriodo(), null), ControladorHorarios.numdia(Integer.parseInt(horario.getDia())), horario.getEntrada(), horario.getSalida()

                                });
                            }
                        }
                    }
                }
                break;
            default:
                break;
        }
    }

    private void cargaPeriodos() {
        comboPeriodo.removeAllItems();
        comboPeriodoBusqueda.removeAllItems();
        comboPeriodoBusqueda.addItem("TODOS");
        for (int i = 0; i < periodos.size(); i++)
        {
            comboPeriodo.addItem(((periodoEscolar) periodos.get(i)).getPeriodo());
            comboPeriodoBusqueda.addItem(((periodoEscolar) periodos.get(i)).getPeriodo());
        }
        if (comboPeriodo.getItemCount() == 0)
        {
            cadena += "\n NO HAY PERIODOS REGISTRADOS, CONTACTE A SU ADMINISTRADOR PARA QUE REGISTRE NUEVOS PERIODOS";
            txtInconsistencias.setText(cadena);
        }
    }

    private void llenaGrupos() {
        comboGrupo.removeAllItems();
        for (int i = 0; i < grupos.size(); i++)
        {
            comboGrupo.addItem(((Grupo) grupos.get(i)).getNombreGrupo());
        }
        if (comboGrupo.getItemCount() == 0)
        {
            cadena += "\n NO HAY GRUPOS REGISTRADOS, REGISTRE NUEVO GRUPOS";
            txtInconsistencias.setText(cadena);
        }
    }

    private void llenaGruposFiltro() {
        comboGrupoBusqueda.removeAllItems();
        for (int i = 0; i < grupos.size(); i++)
        {
            comboGrupoBusqueda.addItem(((Grupo) grupos.get(i)).getNombreGrupo());
        }
    }

    private void llenaMaterias() {
        comboMateria.removeAllItems();
        for (int i = 0; i < materias.size(); i++)
        {
            comboMateria.addItem(((Materia) materias.get(i)).getUnidadAprendizaje());
        }
        if (comboMateria.getItemCount() == 0)
        {
            cadena += "\n NO HAY UNIDADES DE APRENDIZAJE (MATERIAS) REGISTRADAS, REGISTRE NUEVAS MATERIAS";
            txtInconsistencias.setText(cadena);
        }
    }

    private void llenaDocentes() {
        comboDocente.removeAllItems();
        for (int i = 0; i < profesores.size(); i++)
        {
            comboDocente.addItem(((Profesor) profesores.get(i)).getNombres() + " " + ((Profesor) profesores.get(i)).getApellidoP() + " " + ((Profesor) profesores.get(i)).getApellidoM());
        }
        if (comboDocente.getItemCount() == 0)
        {
            cadena += "\n NO HAY DOCENTES REGISTRADOS, REGISTRE NUEVOS DOCENTES";
            txtInconsistencias.setText(cadena);
        }
    }

    private void edicion() {
        if (edicion)
        {
            edicion = false;
        } else
        {
            edicion = true;
        }
    }

    private void llenaPlan() {
        comboPlanes.removeAllItems();
        for (int i = 0; i < plans.size(); i++)
        {
            comboPlanes.addItem(((PlanEstudios) plans.get(i)).getPlanEstudios());
        }
                if (comboGrupo.getItemCount() == 0)
        {
            cadena += "\n NO HAY PLANES REGISTRADOS, REGISTRE NUEVOS PLANES";
            txtInconsistencias.setText(cadena);
        }
    }

    private String buscaGrupo(String id, String grupo) {
        if (grupo != null)
        {
            for (Object g : grupos)
            {
                Grupo gr = (Grupo) g;
                if (gr.getNombreGrupo().equals(grupo))
                {
                    return gr.getIdGrupo();
                }
            }
        } else
        {
            for (Object g : grupos)
            {
                Grupo gr = (Grupo) g;
                if (gr.getIdGrupo().equals(id))
                {
                    return gr.getNombreGrupo();
                }
            }
        }
        return null;
    }

    private String buscaPeriodo(String id, String periodo) {
        if (periodo != null)
        {
            for (Object p : periodos)
            {
                periodoEscolar gr = (periodoEscolar) p;
                if ((gr.getPeriodo()).equals(periodo))
                {
                    return gr.getId_periodo();
                }
            }
        } else
        {
            for (Object p : periodos)
            {
                periodoEscolar gr = (periodoEscolar) p;
                if ((gr.getId_periodo()).equals(id))
                {
                    return gr.getPeriodo();
                }
            }
        }
        return null;
    }

    private String buscaMateria(String id, String materia) {
        if (materia != null)
        {
            for (Object m : materias)
            {
                Materia mt = (Materia) m;
                if (mt.getUnidadAprendizaje().equals(materia))
                {
                    return mt.getClaveMateria();
                }
            }
        } else
        {
            for (Object m : materias)
            {
                Materia mt = (Materia) m;
                if (mt.getClaveMateria().equals(id))
                {
                    return mt.getUnidadAprendizaje();
                }
            }
        }
        return null;
    }

    private boolean comparaGrupos(PeriodoHorarios hr) {
        boolean var = true;
        double entradaHR, salidaHR, entradaBd, salidaBD;
        System.out.println("grpo " + hr.getIdGrupo());
        for (int i = 0; i < horariosBD.size(); i++)
        {
            if (hr.getIdHorario() != horariosBD.get(i).getIdHorario() && hr.getDia().equals(horariosBD.get(i).getDia()) && hr.getIdGrupo().equals(horariosBD.get(i).getIdGrupo()) && hr.getIdPeriodo().equals(horariosBD.get(i).getIdPeriodo()))
            {
                System.out.println("+ + + + + Es el mismo dia en " + i + " y elm mismo grupo en registro " + horariosBD.get(i).getIdHorario());
                entradaHR = Double.parseDouble(hr.getEntrada().substring(0, 2) + "." + hr.getEntrada().substring(3, 5));
                salidaHR = Double.parseDouble(hr.getSalida().substring(0, 2) + "." + hr.getSalida().substring(3, 5));
                entradaBd = Double.parseDouble(horariosBD.get(i).getEntrada().substring(0, 2) + "." + horariosBD.get(i).getEntrada().substring(3, 5));
                salidaBD = Double.parseDouble(horariosBD.get(i).getSalida().substring(0, 2) + "." + horariosBD.get(i).getSalida().substring(3, 5));

                System.out.println(". . . . . entrada registro " + entradaHR + " Y salida " + salidaHR);
                System.out.println(". . . . . entrada registro " + entradaBd + " Y salida " + salidaBD);
                if (entradaHR >= entradaBd && entradaHR < salidaBD)
                {
                    Mensaje.error(this, "Este grupo ya tiene la materia de " + buscaMateria(horariosBD.get(i).getClaveMateria(), null) + " De las " + entradaBd + "Hrs. a las " + salidaBD + "Hrs.");
                    var = false;
                }
            }
        }
        return var;
    }

    private boolean comparaProfesores(PeriodoHorarios hr) {
        System.out.println("entre a profesores");
        boolean var = true;
        double entradaHR, salidaHR, entradaBd, salidaBD;
        for (int i = 0; i < horariosBD.size(); i++)
        {
            if (hr.getIdHorario() != horariosBD.get(i).getIdHorario() && hr.getRfc().equalsIgnoreCase(horariosBD.get(i).getRfc()) && hr.getDia().equals(horariosBD.get(i).getDia()) && hr.getIdPeriodo().equals(horariosBD.get(i).getIdPeriodo()))
            {
                System.out.println("+ + + + + Es el mismo rfc  y el mismo dia en registro " + horariosBD.get(i).getIdHorario());
                entradaHR = Double.parseDouble(hr.getEntrada().substring(0, 2) + "." + hr.getEntrada().substring(3, 5));
                salidaHR = Double.parseDouble(hr.getSalida().substring(0, 2) + "." + hr.getSalida().substring(3, 5));
                entradaBd = Double.parseDouble(horariosBD.get(i).getEntrada().substring(0, 2) + "." + horariosBD.get(i).getEntrada().substring(3, 5));
                salidaBD = Double.parseDouble(horariosBD.get(i).getSalida().substring(0, 2) + "." + horariosBD.get(i).getSalida().substring(3, 5));
                System.out.println("Grupo: " + horariosBD.get(i).getIdGrupo());
                System.out.println("Grupo: " + buscaGrupo(horariosBD.get(i).getIdGrupo(), null));
                System.out.println(". . . . . entrada hr " + entradaHR + " Y salida " + salidaHR);
                System.out.println(". . . . . entrada bd " + entradaBd + " Y salida " + salidaBD);
                if (entradaHR >= entradaBd && entradaHR < salidaBD)
                {
                    Mensaje.error(this, "Este docente ya tiene una materia asignada de las: " + entradaBd + " Hrs. a las " + salidaBD + " Hrs. En el grupo " + buscaGrupo(horariosBD.get(i).getIdGrupo(), null));
                    //System.out.println("! ! ! ! ! Choque de horas de entradaHR: " + entradaHR + " con entradaBD: " + entradaBd +" y salidaBD: " + salidaBD);
                    //System.out.println("Del registro: " + horariosBD.get(i).getIdHorario());
                    var = false;
                }
            }
        }
        return var;
    }

    private void cancelar() {
        edicion();
        CtrlInterfaz.limpia(txtMatricula, txtHoraEntrada, txtHoraSalida);
        CtrlInterfaz.habilita(false, txtMatricula, comboPeriodo, comboPlanes, comboGrupo, comboMateria, comboDocente, comboDia, txtHoraEntrada, txtHoraSalida, btnCancelar);
        CtrlInterfaz.habilita(true, btnNuevo, btnModificar, btnEliminar, btnExportar);
        btnNuevo.setText("NUEVO");
        btnModificar.setText("MODIFICAR");
    }

    private boolean insertaEnBaseUnicoHorario(PeriodoHorarios horario) {
        boolean registro = ConsultasObjetos.inserta(horario, ConectarBase.conectado(), "horarios");
        return registro;
    }

    private int buscarCombo(String text, JComboBox<String> jCombo) {
        for (int i = 0; i < jCombo.getItemCount(); i++)
        {
            if (text.equals(jCombo.getItemAt(i)))
            {
                return i;
            }
        }
        return 0;
    }

    private String retornameLic(String grupito) {
        Grupo gp = new Grupo();
        gp = (Grupo) ConsultasObjetos.consultaUnica("grupo", "nombre_grupo", grupito, ConectarBase.conectado());
        if (gp != null)
        {
            return gp.getId_licenciatura();
        } else
        {
            return "Sin datos";
        }
    }

    private String buscaPlan(String id, String plan) {
        if (plan != null)
        {
            for (Object pl : plans)
            {
                PlanEstudios plan1 = (PlanEstudios) pl;
                if ((plan1.getPlanEstudios()).equals(plan))
                {
                    return plan1.getIdPlan();
                }
            }
        } else
        {
            for (Object pl : plans)
            {
                PlanEstudios plan1 = (PlanEstudios) pl;
                if ((plan1.getIdPlan()).equals(id))
                {
                    return plan1.getPlanEstudios();
                }
            }
        }
        return null;
    }

    private void importarBD() {
        lics = ConsultasObjetos.consultaMuchos("licenciatura", null, null, null, null, "nombre", ConectarBase.conectado());
        periodos = ConsultasObjetos.consultaMuchos("periodo_escolar", null, null, null, null, "periodo", ConectarBase.conectado());
        grupos = ConsultasObjetos.consultaMuchos("grupo", "id_licenciatura", login.lic, null, null, "nombre_grupo", ConectarBase.conectado());
        materias = ConsultasObjetos.consultaMuchos("materia", "id_licenciatura", login.lic, null, null, "unidad_aprendizaje", ConectarBase.conectado());
        profesores = ConsultasObjetos.consultaMuchos("profesores", "nivel", "profesor", null, null, "nombres", ConectarBase.conectado());
        plans = ConsultasObjetos.consultaMuchos("plan_estudios", "id_licenciatura", login.lic, null, null, "plan_estudios", ConectarBase.conectado());
        horarios = ConsultasObjetos.consultaMuchos("horarios", null, null, null, null, "dia", ConectarBase.conectado());
        horariosBD = new ArrayList(ConsultasObjetos.consultaMuchos("horarios", null, null, null, null, null, ConectarBase.conectado()));
        ConectarBase.desconectaBD();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(VtnHorariosCoordinador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(VtnHorariosCoordinador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(VtnHorariosCoordinador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(VtnHorariosCoordinador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VtnHorariosCoordinador().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnCerrar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnExportar;
    private javax.swing.JButton btnModificar;
    private javax.swing.JButton btnNuevo;
    private javax.swing.JButton btnRegresar;
    private javax.swing.JComboBox<String> comboDia;
    private javax.swing.JComboBox<String> comboDocente;
    private javax.swing.JComboBox<String> comboGrupo;
    private javax.swing.JComboBox<String> comboGrupoBusqueda;
    private javax.swing.JComboBox<String> comboMateria;
    private javax.swing.JComboBox<String> comboPeriodo;
    private javax.swing.JComboBox<String> comboPeriodoBusqueda;
    private javax.swing.JComboBox<String> comboPlanes;
    private javax.swing.JComboBox<String> comboTipo;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel labelnombre;
    private javax.swing.JLabel labelnombre1;
    private javax.swing.JLabel labelnombre10;
    private javax.swing.JLabel labelnombre11;
    private javax.swing.JLabel labelnombre12;
    private javax.swing.JLabel labelnombre2;
    private javax.swing.JLabel labelnombre3;
    private javax.swing.JLabel labelnombre4;
    private javax.swing.JLabel labelnombre5;
    private javax.swing.JLabel labelnombre6;
    private javax.swing.JLabel labelnombre7;
    private javax.swing.JLabel labelnombre8;
    private javax.swing.JLabel labelnombre9;
    private javax.swing.JPanel panelBusqeuda;
    private javax.swing.JPanel panelCaptura;
    private javax.swing.JPanel panelConsulta1;
    private javax.swing.JPanel panelEXportacion;
    private javax.swing.JPanel panelFiltros;
    private javax.swing.JPanel panelTabla;
    private javax.swing.JTable tablaHorarios;
    private javax.swing.JTextField txtHoraEntrada;
    private javax.swing.JTextField txtHoraSalida;
    private javax.swing.JTextArea txtInconsistencias;
    private javax.swing.JTextField txtMatricula;
    private javax.swing.JTextField txtNombreArchivo;
    // End of variables declaration//GEN-END:variables
}
