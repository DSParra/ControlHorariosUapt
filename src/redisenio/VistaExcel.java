/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package redisenio;

import Clases.Archivo;
import Clases.ConectarBase;
import Clases.ConsultasObjetos;
import Controlador.ControladorHorarios;
import Objetos.Grupo;
import Objetos.Licenciatura;
import Objetos.Materia;
import Objetos.PeriodoHorarios;
import Objetos.Profesor;
import Objetos.periodoEscolar;
import cjb.ci.Mensaje;
import java.io.File;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author MoisesVidalHernandez
 */
public class VistaExcel extends javax.swing.JFrame {

    /**
     * Creates new form VistaExcel
     */
    public VistaExcel() {
        initComponents();
        this.setIconImage(new ImageIcon(getClass().getResource("/Iconos2/SCHR.png")).getImage());
        this.setExtendedState(MAXIMIZED_BOTH);
    }
    public static int valVentana;

    File archivo;
    int numcorreo = 0;
    String cabeceras[];
    String tipoExcel = "";
    String cabecerasProfesor[] =
    {
        "rfc", "apellido paterno", "apellido materno", "nombre", "grado academico", "correo", "telefono"
    };
    String cabecerasMateria[] =
    {
        "clave de la materia", "unidad de aprendizaje", "horas", "creditos", "numero de periodo", "nucleo", "tipo", "licenciatura", "plan de estudios"
    };
    String cabecerasHorario[] =
    {
        "clave materia","unidad de aprendizaje", "rfc", "profesor", "grupo","periodo","dia","entrada","salida"
    };
    ArrayList<Profesor> profes;
    ArrayList<Materia> materias;
    ArrayList<Grupo> grupos;
    ArrayList<Licenciatura> carreras;
    ArrayList<periodoEscolar> periodos;
    ArrayList<PeriodoHorarios> horarios;
    ArrayList<PeriodoHorarios> horariosBD;

    private File abrirArchivo() {
        String aux = "";
        String texto = "";
        String nombre = "";
        File abre = null;

        try
        {
            /**
             * llamamos el metodo que permite cargar la ventana
             */
            JFileChooser file = new JFileChooser();
            file.showOpenDialog(this);
            nombre = file.getSelectedFile().getName();
            /**
             * abrimos el archivo seleccionado
             */

            abre = file.getSelectedFile();
            //Archivo.AbreArchivoV1(abre);
            return abre;
        } catch (Exception ex)
        {
            JOptionPane.showMessageDialog(null, ex + ""
                    + "\nNo se ha encontrado el archivo",
                    "ADVERTENCIA!!!", JOptionPane.WARNING_MESSAGE);
        }
        return abre;
        //El texto se 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        btnImportar1 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        btnpruebas = new javax.swing.JButton();
        btnCarga = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtidentifica = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTDatosExcel = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jCheckLllaves = new javax.swing.JCheckBox();
        jCheckMateriasBD = new javax.swing.JCheckBox();
        jCheckProfesores = new javax.swing.JCheckBox();
        jCheckExcel = new javax.swing.JCheckBox();
        jPanel1 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel10 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtcruzesExcel = new javax.swing.JTextArea();
        jPanel11 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        txtCruzeMaterias = new javax.swing.JTextArea();
        jPanel12 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        txtCruzeProfesores = new javax.swing.JTextArea();
        jPanel13 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtDatosNoEncontrados = new javax.swing.JTextArea();
        jPanel9 = new javax.swing.JPanel();
        jBRegresar = new javax.swing.JButton();
        jBCerrarSesion = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setLayout(new java.awt.GridBagLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("VISTA EXCEL");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.5;
        jPanel4.add(jLabel1, gridBagConstraints);

        jPanel6.setBackground(new java.awt.Color(51, 51, 0));
        jPanel6.setLayout(new java.awt.GridBagLayout());

        btnImportar1.setBackground(new java.awt.Color(102, 102, 0));
        btnImportar1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnImportar1.setForeground(new java.awt.Color(255, 255, 255));
        btnImportar1.setText("Importar");
        btnImportar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImportar1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel6.add(btnImportar1, gridBagConstraints);

        jButton4.setBackground(new java.awt.Color(102, 102, 0));
        jButton4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton4.setForeground(new java.awt.Color(255, 255, 255));
        jButton4.setText("Eliminar Celda");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel6.add(jButton4, gridBagConstraints);

        btnpruebas.setBackground(new java.awt.Color(102, 102, 0));
        btnpruebas.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnpruebas.setForeground(new java.awt.Color(255, 255, 255));
        btnpruebas.setText("Ejectuar Pruebas");
        btnpruebas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnpruebasActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel6.add(btnpruebas, gridBagConstraints);

        btnCarga.setBackground(new java.awt.Color(102, 102, 0));
        btnCarga.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnCarga.setForeground(new java.awt.Color(255, 255, 255));
        btnCarga.setText("Cargar");
        btnCarga.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCargaActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel6.add(btnCarga, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.5;
        jPanel4.add(jPanel6, gridBagConstraints);

        jPanel5.setBackground(new java.awt.Color(0, 51, 51));
        jPanel5.setLayout(new java.awt.GridBagLayout());

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Tipo de excel:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel5.add(jLabel2, gridBagConstraints);

        txtidentifica.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtidentifica.setText("No identificado");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel5.add(txtidentifica, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.5;
        jPanel4.add(jPanel5, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.RELATIVE;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.RELATIVE;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.3;
        getContentPane().add(jPanel4, gridBagConstraints);

        jPanel3.setLayout(new java.awt.GridBagLayout());

        jTDatosExcel.setBackground(new java.awt.Color(25, 83, 0));
        jTDatosExcel.setForeground(new java.awt.Color(255, 255, 255));
        jTDatosExcel.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTDatosExcel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(jScrollPane1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.7;
        getContentPane().add(jPanel3, gridBagConstraints);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setLayout(new java.awt.GridBagLayout());

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setText("RESULTADO DE PRUEBAS");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.5;
        jPanel2.add(jLabel3, gridBagConstraints);

        jPanel7.setBackground(new java.awt.Color(51, 51, 0));
        jPanel7.setLayout(new java.awt.GridBagLayout());

        jCheckLllaves.setForeground(new java.awt.Color(255, 255, 255));
        jCheckLllaves.setText("DATOS CORRECTOS EN EXCEL");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel7.add(jCheckLllaves, gridBagConstraints);

        jCheckMateriasBD.setForeground(new java.awt.Color(255, 255, 255));
        jCheckMateriasBD.setText("MATERIAS CRUZADAS");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel7.add(jCheckMateriasBD, gridBagConstraints);

        jCheckProfesores.setForeground(new java.awt.Color(255, 255, 255));
        jCheckProfesores.setText("PROFESORES CRUZADOS ");
        jCheckProfesores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckProfesoresActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel7.add(jCheckProfesores, gridBagConstraints);

        jCheckExcel.setForeground(new java.awt.Color(255, 255, 255));
        jCheckExcel.setText("HORARIOS CRUZADOS EN EL EXCEL");
        jCheckExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckExcelActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel7.add(jCheckExcel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.5;
        jPanel2.add(jPanel7, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.RELATIVE;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.RELATIVE;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.3;
        getContentPane().add(jPanel2, gridBagConstraints);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jPanel8.setLayout(new java.awt.GridBagLayout());

        txtcruzesExcel.setColumns(20);
        txtcruzesExcel.setRows(5);
        jScrollPane3.setViewportView(txtcruzesExcel);

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3)
                .addContainerGap())
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 347, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("HORARIOS CRUZADOS EN EXCEL", jPanel10);

        txtCruzeMaterias.setColumns(20);
        txtCruzeMaterias.setRows(5);
        jScrollPane4.setViewportView(txtCruzeMaterias);

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4)
                .addContainerGap())
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 347, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("ERRORES CON MATERIAS", jPanel11);

        txtCruzeProfesores.setColumns(20);
        txtCruzeProfesores.setRows(5);
        jScrollPane5.setViewportView(txtCruzeProfesores);

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5)
                .addContainerGap())
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 347, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("ERRORES CON PROFESORES", jPanel12);

        txtDatosNoEncontrados.setColumns(20);
        txtDatosNoEncontrados.setRows(5);
        jScrollPane2.setViewportView(txtDatosNoEncontrados);

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addContainerGap())
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 347, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("DATOS NO ENCONTRADOS", jPanel13);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.9;
        jPanel8.add(jTabbedPane1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.8;
        jPanel1.add(jPanel8, gridBagConstraints);

        jPanel9.setBackground(new java.awt.Color(51, 51, 0));
        jPanel9.setLayout(new java.awt.GridBagLayout());

        jBRegresar.setBackground(new java.awt.Color(102, 102, 0));
        jBRegresar.setForeground(new java.awt.Color(255, 255, 255));
        jBRegresar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/flecha(2).png"))); // NOI18N
        jBRegresar.setText("Regresar");
        jBRegresar.setToolTipText("");
        jBRegresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBRegresarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 1.0;
        jPanel9.add(jBRegresar, gridBagConstraints);

        jBCerrarSesion.setBackground(new java.awt.Color(102, 102, 0));
        jBCerrarSesion.setForeground(new java.awt.Color(255, 255, 255));
        jBCerrarSesion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/flecha(3).png"))); // NOI18N
        jBCerrarSesion.setText("Salir");
        jBCerrarSesion.setToolTipText("");
        jBCerrarSesion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBCerrarSesionActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.5;
        jPanel9.add(jBCerrarSesion, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.5;
        jPanel1.add(jPanel9, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jPanel1, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnImportar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImportar1ActionPerformed
        limpiaDatos();
        btnCarga.setEnabled(false);
        archivo = abrirArchivo();
        Archivo.Importar(archivo, jTDatosExcel);
        cabeceras = new String[jTDatosExcel.getColumnCount()];
        for (int i = 0; i < jTDatosExcel.getColumnCount(); i++)
        {
            cabeceras[i] = jTDatosExcel.getColumnName(i);
        }
        tipoExcel = identifica();
        txtidentifica.setText(tipoExcel);
    }//GEN-LAST:event_btnImportar1ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        if (jTDatosExcel.getSelectedRow() != -1)
        {
            ((DefaultTableModel) jTDatosExcel.getModel()).removeRow(jTDatosExcel.getSelectedRow());
        } else
        {
            Mensaje.error(this, "No se pudo eliminar la celda");
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void btnpruebasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnpruebasActionPerformed
        System.out.println("");
        limpiaDatos();
        if (tipoExcel.equalsIgnoreCase("horario"))
        {
            horarios = guardaExcel();
            if (horarios == null)
            {
                Mensaje.error(this, "Hay un error con los datos, guarda excel en null");
            } else
            {  
                System.out.println("");
                jCheckLllaves.setSelected(validaLlaves());   
                if (jCheckLllaves.isSelected()){
                    jCheckExcel.setSelected(comparaMateriasExcel());
                    /**
                     * validaciones excel

                       llaves -> mostrar clave y nombre del elemento 

                       conversion en dias -> no funciona con Ma
                     */
                    if(jCheckExcel.isSelected()){
                        jCheckProfesores.setSelected(evaluaProfesores());
                        if(jCheckProfesores.isSelected()){
                            jCheckMateriasBD.setSelected(evaluaGruposBD());
                            if(jCheckMateriasBD.isSelected()){
                               btnCarga.setEnabled(true);
                                Mensaje.exito(this, "Se han pasado todas las pruebas");
                            }else{
                                Mensaje.error(this, "Error en Materias BD");
                            }
                        }else{
                            Mensaje.error(this, "Error en Profesores");
                        }
                    }else{
                        Mensaje.error(this, "Error en Excel");
                    }
                }else{
                    Mensaje.error(this, "Error en Llaves");
                }
                
                /**
                System.out.println("");
                jCheckLllaves.setSelected(validaExcel());   
                if (jCheckLllaves.isSelected())
                {
                    jCheckExcel.setSelected(comparaMateriasExcel());
                } else if (jCheckExcel.isSelected()){
                    jCheckProfesores.setSelected(evaluaProfesores());
                } else if (jCheckProfesores.isSelected()){
                    jCheckMateriasBD.setSelected(evaluaGruposBD());
                } else if(jCheckMateriasBD.isSelected()){
                    btnCarga.setEnabled(true);
                    Mensaje.exito(this, "Se han pasado todas las pruebas");
                }else{
                    btnCarga.setEnabled(false);
                    Mensaje.error(this, "Alguna prueba no ha sido superada");
                }
                * **/

                
                
                
                
                
                if (jCheckExcel.isSelected() && jCheckProfesores.isSelected() && jCheckMateriasBD.isSelected() && jCheckLllaves.isSelected())
                {
                    btnCarga.setEnabled(true);
                    Mensaje.exito(this, "Se han pasado todas las pruebas");
                } else
                {
                    btnCarga.setEnabled(false);
                    Mensaje.error(this, "Alguna prueba no ha sido superada");
                }
            }

        }

    }//GEN-LAST:event_btnpruebasActionPerformed

    private void btnCargaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCargaActionPerformed
        ArrayList horarios = guardaExcel();
        ConsultasObjetos.insertaMuchos(horarios, ConectarBase.conectado(), "horarios");
        ConectarBase.desconectaBD();
    }//GEN-LAST:event_btnCargaActionPerformed

    private void jCheckProfesoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckProfesoresActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckProfesoresActionPerformed

    private void jCheckExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckExcelActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckExcelActionPerformed

    private void jBRegresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBRegresarActionPerformed
        this.setVisible(false);
        if (valVentana == 1)
        {
            new VtnAdministrador().setVisible(true);
        } else
        {
            new VtnMenuCoordinador().setVisible(true);
        }
    }//GEN-LAST:event_jBRegresarActionPerformed

    private void jBCerrarSesionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBCerrarSesionActionPerformed
        this.setVisible(false);
        new Login().setVisible(true);
    }//GEN-LAST:event_jBCerrarSesionActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        limpiaDatos();
        txtCruzeMaterias.setEditable(false);
        txtCruzeProfesores.setEditable(false);
        txtDatosNoEncontrados.setEditable(false);
        txtcruzesExcel.setEditable(false);
        txtidentifica.setEditable(false);
        btnCarga.setEnabled(false);
        jCheckExcel.setEnabled(false);
        jCheckLllaves.setEnabled(false);
        jCheckMateriasBD.setEnabled(false);
        jCheckProfesores.setEnabled(false);
        
        importaBD();
        ordenamientoBurbujaID("licenciatura");
        ordenamientoBurbujaNombre("materia");
        ordenamientoBurbujaNombre("grupo");
    }//GEN-LAST:event_formWindowOpened

    public void limpiaDatos() {
        txtCruzeMaterias.setText("");
        txtCruzeProfesores.setText("");
        txtDatosNoEncontrados.setText("");
        txtcruzesExcel.setText("");
        jCheckExcel.setSelected(false);
        jCheckLllaves.setSelected(false);
        jCheckMateriasBD.setSelected(false);
        jCheckProfesores.setSelected(false);
    }

    public ArrayList<Object> extraeDatos() {
        ArrayList profesores = new ArrayList();

        for (int i = 0; i < jTDatosExcel.getRowCount(); i++)
        {
            Profesor profe = new Profesor();
            profe.setRfc(String.valueOf(jTDatosExcel.getValueAt(i, 1)));
            System.out.println(String.valueOf(jTDatosExcel.getValueAt(i, 1)));
            profe.setNombres((String) jTDatosExcel.getValueAt(i, 4));
            profe.setApellidoP((String) jTDatosExcel.getValueAt(i, 2));
            profe.setApellidoM((String) jTDatosExcel.getValueAt(i, 3));
            profe.setCorreo("no ingresado" + String.valueOf(numcorreo++));
            profe.setTelefono((String) jTDatosExcel.getValueAt(i, 7));
            profe.setGradoAcademico((String) jTDatosExcel.getValueAt(i, 3));
            profesores.add(profe);
        }
        return profesores;
    }

    public String identifica() {
        boolean identificado = false;
        if (cabeceras.length == cabecerasProfesor.length)
        {
            for (int i = 0; i < cabeceras.length; i++)
            {
                if (!cabeceras[i].equalsIgnoreCase(cabecerasProfesor[i]))
                {
                    break;
                }
            }
            txtDatosNoEncontrados.setText("Es un profesor");
            identificado = true;
            return "profesor";

        }
        if (cabeceras.length == cabecerasMateria.length && identificado)
        {
            for (int i = 0; i < cabeceras.length; i++)
            {
                if (!cabeceras[i].equalsIgnoreCase(cabecerasMateria[i]))
                {
                    break;
                }
            }
            identificado = true;
            return "materia";
        }

        if (cabeceras.length == cabecerasHorario.length)
        {
            for (int i = 0; i < cabeceras.length; i++)
            {
                if (!cabeceras[i].equalsIgnoreCase(cabecerasHorario[i]))
                {
                    break;
                }
            }
            identificado = true;
            return "horario";
        }
        if (!identificado)
        {
            return "NO SE ENCUENTRA EL FORMATO";
        }
        return null;
    }

    public ArrayList guardaExcel() {
        //try{
        if (tipoExcel.equalsIgnoreCase("horario"))
        {
            //System.out.println("Entrando a horario");
            ArrayList horarios = new ArrayList();
            PeriodoHorarios horario;

            for (int i = 0; i < jTDatosExcel.getRowCount(); i++)
            {
                horario = new PeriodoHorarios();
                horario.setClaveMateria(String.valueOf(jTDatosExcel.getValueAt(i, 0)));
                horario.setRfc(String.valueOf(String.valueOf(jTDatosExcel.getValueAt(i, 2))));
                if (ControladorHorarios.numdia(String.valueOf(jTDatosExcel.getValueAt(i, 6))) != 0)
                {
                    horario.setDia(String.valueOf(ControladorHorarios.numdia(String.valueOf(jTDatosExcel.getValueAt(i, 6)))));
                }
                horario.setIdGrupo(String.valueOf(busquedaBinariaRetID(String.valueOf(jTDatosExcel.getValueAt(i, 4)), "grupo")));
                horario.setIdPeriodo(String.valueOf(busquedaBinariaRetID(String.valueOf(jTDatosExcel.getValueAt(i, 5)), "periodo")));
                horario.setEntrada(String.valueOf(jTDatosExcel.getValueAt(i, 7)));
                horario.setSalida(String.valueOf(jTDatosExcel.getValueAt(i, 8)));
                horarios.add(horario);
                muestraHorarios(horario);
            }
            ordenamientoBurbujaID("grupo");
            return horarios;
        }
        return null;

//        }catch(Exception e){
//            Mensaje.error(this, "Algun dato no es correcto");
//            System.out.println("Error en guarda excel "+e);
//        }finally{
//            return null;
//        }
    }

    public void importaBD() {
        materias = new ArrayList(ConsultasObjetos.consultaMuchos("materia", null, null, null, null, null, ConectarBase.conectado()));
        profes = new ArrayList(ConsultasObjetos.consultaMuchos("profesores", null, null, null, null, null, ConectarBase.conectado()));
        grupos = new ArrayList(ConsultasObjetos.consultaMuchos("grupo", null, null, null, null, null, ConectarBase.conectado()));
        carreras = new ArrayList(ConsultasObjetos.consultaMuchos("licenciatura", null, null, null, null, null, ConectarBase.conectado()));
        periodos = new ArrayList(ConsultasObjetos.consultaMuchos("periodo_escolar", null, null, null, null, null, ConectarBase.conectado()));
        horariosBD = new ArrayList(ConsultasObjetos.consultaMuchos("horarios", null, null, null, null, null, ConectarBase.conectado()));
        ConectarBase.desconectaBD();
    }

    public void muestraBD() {
        for (Object materia : materias)
        {
            System.out.println(((Materia) materia).getUnidadAprendizaje());
        }
//        for (Object profesor : profes){
//            System.out.println(((Profesor)profesor).getNombres());
//        }
        for (Object grupo : grupos)
        {
            System.out.println(((Grupo) grupo).getNombreGrupo());
        }
        for (Object licen : carreras)
        {
            System.out.println(((Licenciatura) licen).getLicenciatura());
        }
        for (Object periodo : periodos)
        {
            System.out.println(((periodoEscolar) periodo).getPeriodo());
        }
    }

    public void transforma() {

    }
    //validacion de materias en excel
    public boolean comparaMateriasExcel() {
        boolean prueba = true;
        double entrada1, salida1, entrada2, salida2;
        String mensaje = "";
        try
        {
            for (int i = 0; i < horarios.size(); i++)
            {
                for (int j = 0; j < horarios.size(); j++)
                {
                    //System.out.println("dia: "+horarios.get(i).getDia() + " ---->"+ "dia: "+horarios.get(j).getDia() );
                    if (horarios.get(i).getDia().equals(horarios.get(j).getDia()) && i != j
                            //&& horarios.get(i).getIdGrupo().equals(horarios.get(j).getIdGrupo())
                            //&& horarios.get(i).getClaveMateria().equals(horarios.get(j).getClaveMateria())
                            && horarios.get(i).getRfc().equals(horarios.get(j).getRfc()))
                    {
                        //System.out.println("Mismo dia ");
                        //System.out.println(horarios.get(i).getClaveMateria() + " " + horarios.get(i).getRfc() + " " + horarios.get(i).getIdPeriodo());
                        //System.out.println(horarios.get(j).getClaveMateria() + " " + horarios.get(j).getRfc() + " " + horarios.get(j).getIdPeriodo());
                        entrada1 = Double.parseDouble(horarios.get(i).getEntrada().substring(0, 2) + "." + horarios.get(i).getEntrada().substring(3, 5));
                        salida1 = Double.parseDouble(horarios.get(i).getSalida().substring(0, 2) + "." + horarios.get(i).getSalida().substring(3, 5));
                        entrada2 = Double.parseDouble(horarios.get(j).getEntrada().substring(0, 2) + "." + horarios.get(j).getEntrada().substring(3, 5));
                        salida2 = Double.parseDouble(horarios.get(j).getSalida().substring(0, 2) + "." + horarios.get(j).getSalida().substring(3, 5));
                        if (entrada2 >= entrada1 && entrada2 < salida1)
                        {
                            prueba = false;
                            mensaje += "Cruze de Profesor\n"
                                    + "Materia: " + String.valueOf(jTDatosExcel.getValueAt(i, 1)) + " -> " + String.valueOf(jTDatosExcel.getValueAt(j, 1)) + "\n"
                                    + "Profesor " + String.valueOf(jTDatosExcel.getValueAt(i, 3)) + " -> " + String.valueOf(jTDatosExcel.getValueAt(j, 3)) + "\n"
                                    + "Grupo: " + String.valueOf(jTDatosExcel.getValueAt(i, 4)) + " -> " + String.valueOf(jTDatosExcel.getValueAt(j, 4)) + "\n"
                                    + "Dia: " + String.valueOf(jTDatosExcel.getValueAt(i, 6)) + " -> " + String.valueOf(jTDatosExcel.getValueAt(j, 6)) + "\n"
                                    + "Horario: " + String.valueOf(jTDatosExcel.getValueAt(i, 7)) + " - " + String.valueOf(jTDatosExcel.getValueAt(i, 8)) + " -> " + String.valueOf(jTDatosExcel.getValueAt(j, 7)) + "- " + String.valueOf(jTDatosExcel.getValueAt(j, 8)) + "\n\n";

                            //   + String.valueOf(jTDatosExcel.getValueAt(i, 1)) + " -> " + String.valueOf(jTDatosExcel.getValueAt(i, 4))+String.valueOf(jTDatosExcel.getValueAt(i, 3)) + " " + String.valueOf(jTDatosExcel.getValueAt(i, 7)) + " " + String.valueOf(jTDatosExcel.getValueAt(i, 8))
                            //  + " y "
                            // + String.valueOf(jTDatosExcel.getValueAt(j, 1)) + " -> " + String.valueOf(jTDatosExcel.getValueAt(j, 4)) + " " +String.valueOf(jTDatosExcel.getValueAt(i, 3))+ String.valueOf(jTDatosExcel.getValueAt(j, 7)) + " " + String.valueOf(jTDatosExcel.getValueAt(j, 8)) + "\n\n";
                            //System.out.println("horarios cruzados");
                        }

                    }

                    if (horarios.get(i).getDia().equals(horarios.get(j).getDia()) && i != j
                            && horarios.get(i).getIdGrupo().equals(horarios.get(j).getIdGrupo()))
                    {
                        //&& horarios.get(i).getClaveMateria().equals(horarios.get(j).getClaveMateria())){
                        //&& horarios.get(i).getRfc().equals(horarios.get(j).getRfc())) {
                        //System.out.println("Mismo dia ");
                        //System.out.println(horarios.get(i).getClaveMateria() + " " + horarios.get(i).getRfc() + " " + horarios.get(i).getIdPeriodo());
                        //System.out.println(horarios.get(j).getClaveMateria() + " " + horarios.get(j).getRfc() + " " + horarios.get(j).getIdPeriodo());
                        entrada1 = Double.parseDouble(horarios.get(i).getEntrada().substring(0, 2) + "." + horarios.get(i).getEntrada().substring(3, 5));
                        salida1 = Double.parseDouble(horarios.get(i).getSalida().substring(0, 2) + "." + horarios.get(i).getSalida().substring(3, 5));
                        entrada2 = Double.parseDouble(horarios.get(j).getEntrada().substring(0, 2) + "." + horarios.get(j).getEntrada().substring(3, 5));
                        salida2 = Double.parseDouble(horarios.get(j).getSalida().substring(0, 2) + "." + horarios.get(j).getSalida().substring(3, 5));
                        if (entrada2 >= entrada1 && entrada2 < salida1)
                        {

                            prueba = false;
                            mensaje += "Cruze del mismo Grupo\n"
                                    + "Materia: " + String.valueOf(jTDatosExcel.getValueAt(i, 1)) + " -> " + String.valueOf(jTDatosExcel.getValueAt(j, 1)) + "\n"
                                    + "Profesor " + String.valueOf(jTDatosExcel.getValueAt(i, 3)) + " -> " + String.valueOf(jTDatosExcel.getValueAt(j, 3)) + "\n"
                                    + "Grupo: " + String.valueOf(jTDatosExcel.getValueAt(i, 4)) + " -> " + String.valueOf(jTDatosExcel.getValueAt(j, 4)) + "\n"
                                    + "Dia: " + String.valueOf(jTDatosExcel.getValueAt(i, 6)) + " -> " + String.valueOf(jTDatosExcel.getValueAt(j, 6)) + "\n"
                                    + "Horario: " + String.valueOf(jTDatosExcel.getValueAt(i, 7)) + " - " + String.valueOf(jTDatosExcel.getValueAt(i, 8)) + " -> " + String.valueOf(jTDatosExcel.getValueAt(j, 7)) + "- " + String.valueOf(jTDatosExcel.getValueAt(j, 8)) + "\n\n";

                            //   + String.valueOf(jTDatosExcel.getValueAt(i, 1)) + " -> " + String.valueOf(jTDatosExcel.getValueAt(i, 4))+String.valueOf(jTDatosExcel.getValueAt(i, 3)) + " " + String.valueOf(jTDatosExcel.getValueAt(i, 7)) + " " + String.valueOf(jTDatosExcel.getValueAt(i, 8))
                            //  + " y "
                            // + String.valueOf(jTDatosExcel.getValueAt(j, 1)) + " -> " + String.valueOf(jTDatosExcel.getValueAt(j, 4)) + " " +String.valueOf(jTDatosExcel.getValueAt(i, 3))+ String.valueOf(jTDatosExcel.getValueAt(j, 7)) + " " + String.valueOf(jTDatosExcel.getValueAt(j, 8)) + "\n\n";
                            //System.out.println("horarios cruzados");
                        }
                    }
                }
            }
        } catch (Exception e)
        {
            Mensaje.error(this, "Error en los datos");
            System.out.println("Error en comparaMaterias " + e);
            prueba = false;
        }
        txtcruzesExcel.setText(mensaje);
        return prueba;
    }

    public boolean evaluaProfesores() {
        boolean prueba = true;
        double entrada1, entrada2, salida1, salida2;
        String mensaje = "";
        for (int i = 0; i < horarios.size(); i++)
        {
            for (int j = 0; j < horariosBD.size(); j++)
            {
//                System.out.println("i: " + i);
//                System.out.println("j: " + j);
                if (horarios.get(i).getRfc().equalsIgnoreCase(horariosBD.get(j).getRfc()) && horarios.get(i).getDia().equals(horariosBD.get(j).getDia()))
                {

                    entrada1 = Double.parseDouble(horarios.get(i).getEntrada().substring(0, 2) + "." + horarios.get(i).getEntrada().substring(3, 5));
                    salida1 = Double.parseDouble(horarios.get(i).getSalida().substring(0, 2) + "." + horarios.get(i).getSalida().substring(3, 5));
                    entrada2 = Double.parseDouble(horariosBD.get(j).getEntrada().substring(0, 2) + "." + horariosBD.get(j).getEntrada().substring(3, 5));
                    salida2 = Double.parseDouble(horariosBD.get(j).getSalida().substring(0, 2) + "." + horariosBD.get(j).getSalida().substring(3, 5));
                    //System.out.println("horario1 " + entrada1 + " " + salida1);
                    //System.out.println("horario2 " + entrada2 + " " + salida2);
                    //System.out.println("mismo dia ");
                    if (entrada2 >= entrada1 && entrada2 < salida1)
                    {
                        prueba = false;

                        mensaje += "Cruze de Profesores\n"
                                + "Materia: " + String.valueOf(jTDatosExcel.getValueAt(i, 1)) + " -> " + busquedaBinariaRetNombre(horariosBD.get(j).getClaveMateria(), "materias") + "\n"
                                + "Profesor: " + String.valueOf(jTDatosExcel.getValueAt(i, 3)) + " -> " + busquedaBinariaRetNombre(horariosBD.get(j).getRfc(), "profesores") + "\n"
                                + "Grupo: " + String.valueOf(jTDatosExcel.getValueAt(i, 4)) + "->" + busquedaBinariaRetNombre(Integer.valueOf(horariosBD.get(j).getIdGrupo()), "grupo") + "\n"
                                + "Dia: " + String.valueOf(jTDatosExcel.getValueAt(i, 6)) + " -> " + ControladorHorarios.numdia(Integer.valueOf(horariosBD.get(j).getDia())) + "\n"
                                + "Horario: " + String.valueOf(jTDatosExcel.getValueAt(i, 7)) + " - " + String.valueOf(jTDatosExcel.getValueAt(i, 8)) + " -> " + horariosBD.get(j).getEntrada().substring(0, 5) + " " + horariosBD.get(j).getSalida().substring(0, 5) + "\n\n";

//                        mensaje += "Error Por Profesores\n"
//                                + String.valueOf(jTDatosExcel.getValueAt(i, 1)) + " -> " + String.valueOf(jTDatosExcel.getValueAt(i, 6)) + " " + String.valueOf(jTDatosExcel.getValueAt(i, 7)) + " " + String.valueOf(jTDatosExcel.getValueAt(i, 8))
//                                + " y "+"\n"
//                                + busquedaBinariaRetNombre(horariosBD.get(j).getClaveMateria(), "materias") + "-> " + ControladorHorarios.numdia(Integer.valueOf(horariosBD.get(j).getDia())) + " " + horariosBD.get(j).getEntrada() + " " + horariosBD.get(j).getSalida() + "\n\n";
                        //System.out.println("Profesor: " + String.valueOf(jTDatosExcel.getValueAt(i, 2)) + "cruzado " + horarios.get(i).getDia() + " " + horarios.get(i).getEntrada() + " " + horarios.get(i).getSalida());
                        //System.out.println("Con id: " + horariosBD.get(j).getIdHorario() + " " + horariosBD.get(j).getDia() + " " + horariosBD.get(j).getEntrada() + " " + horariosBD.get(j).getSalida());
                        //txtconsulta.setText(txtconsulta.getText() + "Error en Grupos: " + String.valueOf(jTDatosExcel.getValueAt(i, 0)) + " -> " + String.valueOf(jTDatosExcel.getValueAt(i, 3)) + " y " + String.valueOf(jTDatosExcel.getValueAt(j, 0)) + " -> " + String.valueOf(jTDatosExcel.getValueAt(i, 3)) + "\n\n");
                        //System.out.println("horarios cruzados");
                    }

//                    System.out.println("ProfesorLoc:" + horarios.get(i).getDia() + " " + horarios.get(i).getEntrada() + " " + horarios.get(i).getSalida());
//                    System.out.println("ProfesorBD:" + horariosBD.get(j).getDia() + " " + horariosBD.get(j).getEntrada() + " " + horariosBD.get(j).getSalida());
                }
            }
        }
        txtCruzeProfesores.setText(mensaje);
        return prueba;
    }

    public boolean evaluaGruposBD() {
        boolean prueba = true;
        double entrada1, entrada2, salida1, salida2;
        String mensaje = "";
        for (int i = 0; i < horarios.size(); i++)
        {
            for (int j = 0; j < horariosBD.size(); j++)
            {
                if (horarios.get(i).getClaveMateria().equalsIgnoreCase(horariosBD.get(j).getClaveMateria()) && horarios.get(i).getDia().equalsIgnoreCase(horariosBD.get(j).getDia())
                        && horarios.get(i).getIdGrupo().equals(horariosBD.get(j).getIdGrupo()))
                {
                    entrada1 = Double.parseDouble(horarios.get(i).getEntrada().substring(0, 2) + "." + horarios.get(i).getEntrada().substring(3, 5));
                    salida1 = Double.parseDouble(horarios.get(i).getSalida().substring(0, 2) + "." + horarios.get(i).getSalida().substring(3, 5));
                    entrada2 = Double.parseDouble(horariosBD.get(j).getEntrada().substring(0, 2) + "." + horariosBD.get(j).getEntrada().substring(3, 5));
                    salida2 = Double.parseDouble(horariosBD.get(j).getSalida().substring(0, 2) + "." + horariosBD.get(j).getSalida().substring(3, 5));
                    if (entrada2 >= entrada1 && entrada2 < salida1)
                    {
                        prueba = false;
                        mensaje += "Cruze de Materia\n"
                                + "Materia: " + String.valueOf(jTDatosExcel.getValueAt(i, 1)) + " -> " + busquedaBinariaRetNombre(horariosBD.get(j).getClaveMateria(), "materias") + "\n"
                                + "Profesor " + String.valueOf(jTDatosExcel.getValueAt(i, 3)) + " -> " + busquedaBinariaRetNombre(horariosBD.get(j).getRfc(), "profesores") + "\n"
                                + "Grupo: " + String.valueOf(jTDatosExcel.getValueAt(i, 4)) + busquedaBinariaRetNombre(Integer.valueOf(horariosBD.get(j).getIdGrupo()), "grupo") + "\n"
                                + "Dia: " + String.valueOf(jTDatosExcel.getValueAt(i, 6)) + " -> " + ControladorHorarios.numdia(Integer.valueOf(horariosBD.get(j).getDia())) + "\n"
                                + "Horario: " + String.valueOf(jTDatosExcel.getValueAt(i, 7)) + " - " + String.valueOf(jTDatosExcel.getValueAt(i, 8)) + " -> " + horariosBD.get(j).getEntrada().substring(0, 5) + " " + horariosBD.get(j).getSalida().substring(0, 5) + "\n\n";

//                        mensaje += "Error en materia BD\n"
//                                + String.valueOf(jTDatosExcel.getValueAt(i, 1)) + " -> " + String.valueOf(jTDatosExcel.getValueAt(i, 6)) + " " + String.valueOf(jTDatosExcel.getValueAt(i, 7)) + " " + String.valueOf(jTDatosExcel.getValueAt(i, 8))
//                                + " y "
//                                + busquedaBinariaRetNombre(horariosBD.get(j).getClaveMateria(), "materias") + "-> " + ControladorHorarios.numdia(Integer.valueOf(horariosBD.get(j).getDia())) + " " + horariosBD.get(j).getEntrada() + " " + horariosBD.get(j).getSalida() + "\n\n";
                        //System.out.println("Profesor: " + String.valueOf(jTDatosExcel.getValueAt(i, 2)) + "cruzado " + horarios.get(i).getDia() + " " + horarios.get(i).getEntrada() + " " + horarios.get(i).getSalida());
                        //System.out.println("Con id: " + horariosBD.get(j).getIdHorario() + " " + horariosBD.get(j).getDia() + " " + horariosBD.get(j).getEntrada() + " " + horariosBD.get(j).getSalida());
                        //txtconsulta.setText(txtconsulta.getText() + "Error en Grupos: " + String.valueOf(jTDatosExcel.getValueAt(i, 0)) + " -> " + String.valueOf(jTDatosExcel.getValueAt(i, 3)) + " y " + String.valueOf(jTDatosExcel.getValueAt(j, 0)) + " -> " + String.valueOf(jTDatosExcel.getValueAt(i, 3)) + "\n\n");
                        //System.out.println("horarios cruzados");
                    }

//                    System.out.println("ProfesorLoc:" + horarios.get(i).getDia() + " " + horarios.get(i).getEntrada() + " " + horarios.get(i).getSalida());
//                    System.out.println("ProfesorBD:" + horariosBD.get(j).getDia() + " " + horariosBD.get(j).getEntrada() + " " + horariosBD.get(j).getSalida());
                }
            }
        }
        txtCruzeMaterias.setText(mensaje);
        return prueba;
    }

    //Validacion de llaves en bajadas de bd 
    public boolean validaLlaves() {
        boolean prueba = true;
        double entrada1, entrada2, salida1, salida2;
        String mensaje = "";
        ordenamientoBurbujaID("materia");
        ordenamientoBurbujaNombre("grupo");
        //try{
        for (int i = 0; i < horarios.size(); i++)
        {
            //System.out.println("registro " + i);
            if (busquedaBinariaBuscaID(String.valueOf(jTDatosExcel.getValueAt(i, 0)), "materia") == "")
            {
                prueba = false;
                mensaje += "Materia: " + String.valueOf(jTDatosExcel.getValueAt(i, 0) + " NO ENCONTRADO") + "\n\n";
                //      throw new NullPointerException( "demo" );

                //System.out.println("Materia no encontrado");
            }
            if (busquedaBinariaBuscaID(String.valueOf(jTDatosExcel.getValueAt(i, 2)), "profesor") == "")
            {
                prueba = false;
                mensaje += "Profesor: " + String.valueOf(jTDatosExcel.getValueAt(i, 2) + " NO ENCONTRADO") + "\n\n";
                System.out.println("profesor no encontrado");
            }
            if (busquedaBinariaRetID(String.valueOf(jTDatosExcel.getValueAt(i, 4)), "grupo") == -1)
            {
                prueba = false;
                mensaje += "Grupo: " + String.valueOf(jTDatosExcel.getValueAt(i, 4) + " NO ENCONTRADO") + "\n\n";
                System.out.println("Grupos no encontrado" + i);
            }
            if (busquedaBinariaRetID(String.valueOf(jTDatosExcel.getValueAt(i, 5)), "periodo") == -1)
            {
                prueba = false;
                mensaje += "Periodo: " + String.valueOf(jTDatosExcel.getValueAt(i, 5) + " NO ENCONTRADO") + "\n\n";
                //System.out.println("periodo no encontrado");
            }
        }

        txtDatosNoEncontrados.setText(mensaje);
        return prueba;

//        }catch(Exception e){
//            Mensaje.error(this, "Error en los datos");
//            System.out.println("Error en valida excel "+ e);
//
//        }
    }

    public void ordenamientoBurbujaID(String tipo) {
        switch (tipo)
        {
            case "grupo":
                Grupo grup;
                for (int i = 1; i < grupos.size(); i++)
                {
                    for (int j = 0; j < grupos.size() - i; j++)
                    {
                        if (Integer.valueOf(grupos.get(j).getIdGrupo()) > Integer.valueOf(grupos.get(j + 1).getIdGrupo()))
                        {
                            grup = grupos.get(j);
                            grupos.set(j, grupos.get(j + 1));
                            grupos.set(j + 1, grup);
                        }
                    }
                }
                break;
            case "licenciatura":
                Licenciatura lic;
                for (int i = 1; i < carreras.size(); i++)
                {
                    for (int j = 0; j < carreras.size() - i; j++)
                    {
                        if (carreras.get(j).getIdLicenciatura().compareToIgnoreCase(carreras.get(j + 1).getIdLicenciatura()) > 0)
                        {
                            lic = carreras.get(j);
                            carreras.set(j, carreras.get(j + 1));
                            carreras.set(j + 1, lic);
                        }
                    }
                }
                break;

            case "materia":
                Materia mat;
                for (int i = 1; i < materias.size(); i++)
                {
                    for (int j = 0; j < materias.size() - i; j++)
                    {
                        if (materias.get(j).getClaveMateria().compareToIgnoreCase(materias.get(j + 1).getClaveMateria()) > 0)
                        {
                            mat = materias.get(j);
                            materias.set(j, materias.get(j + 1));
                            materias.set(j + 1, mat);
                        }
                    }
                }

                break;
        }
    }

    public void ordenamientoBurbujaNombre(String tipo) {
        switch (tipo)
        {
            case "grupo":
                Grupo grup;
                for (int i = 1; i < grupos.size(); i++)
                {
                    for (int j = 0; j < grupos.size() - i; j++)
                    {
                        if (grupos.get(j).getNombreGrupo().compareToIgnoreCase(grupos.get(j + 1).getNombreGrupo()) > 0)
                        {
                            grup = grupos.get(j);
                            grupos.set(j, grupos.get(j + 1));
                            grupos.set(j + 1, grup);
                        }
                    }
                }
                break;
            //esta por id
            case "licenciatura":
                Licenciatura lic;
                for (int i = 1; i < carreras.size(); i++)
                {
                    for (int j = 0; j < carreras.size() - i; j++)
                    {
                        if (carreras.get(j).getIdLicenciatura().compareToIgnoreCase(carreras.get(j + 1).getIdLicenciatura()) > 0)
                        {
                            lic = carreras.get(j);
                            carreras.set(j, carreras.get(j + 1));
                            carreras.set(j + 1, lic);
                        }
                    }
                }
                break;

            case "materia":
                Materia mat;
                for (int i = 1; i < materias.size(); i++)
                {
                    for (int j = 0; j < materias.size() - i; j++)
                    {
                        if (materias.get(j).getUnidadAprendizaje().compareToIgnoreCase(materias.get(j + 1).getUnidadAprendizaje()) > 0)
                        {
                            mat = materias.get(j);
                            materias.set(j, materias.get(j + 1));
                            materias.set(j + 1, mat);
                        }
                    }
                }

                break;
        }
    }

    public int busquedaBinariaRetID(String dato, String tipo) {
        int n, inf = 0, sup, centro;
        switch (tipo)
        {
            case "licenciatura":
                n = carreras.size();
                sup = n - 1;
                while (inf <= sup)
                {
                    centro = (sup + inf) / 2;
                    if (carreras.get(centro).getLicenciatura().equalsIgnoreCase(dato))
                    {
                        return Integer.parseInt(carreras.get(centro).getIdLicenciatura());
                    } else if (dato.compareToIgnoreCase(carreras.get(centro).getLicenciatura()) > 0)
                    {
                        sup = centro - 1;
                    } else
                    {
                        inf = centro + 1;
                    }
                }
                break;
            case "grupo":
                n = grupos.size();
                sup = n - 1;
                while (inf <= sup)
                {
                    centro = (sup + inf) / 2;
                    if (grupos.get(centro).getNombreGrupo().equalsIgnoreCase(dato))
                    {
                        return Integer.valueOf(grupos.get(centro).getIdGrupo());
                    } else if (dato.compareToIgnoreCase(grupos.get(centro).getNombreGrupo()) < 0)
                    {

                        sup = centro - 1;
                    } else
                    {
                        inf = centro + 1;
                    }
                }
                break;
            case "periodo":
                n = periodos.size();
                sup = n - 1;
                while (inf <= sup)
                {
                    centro = (sup + inf) / 2;
                    if (periodos.get(centro).getPeriodo().equalsIgnoreCase(dato))
                    {
                        return Integer.valueOf(periodos.get(centro).getId_periodo());
                    } else if (dato.compareToIgnoreCase(periodos.get(centro).getPeriodo()) < 0)
                    {
                        sup = centro - 1;
                    } else
                    {
                        inf = centro + 1;
                    }
                }
                break;
            case "materia":
                n = materias.size();
                sup = n - 1;
                while (inf <= sup)
                {
                    centro = (sup + inf) / 2;
                    if (materias.get(centro).getUnidadAprendizaje().equalsIgnoreCase(dato))
                    {
                        return Integer.valueOf(materias.get(centro).getClaveMateria().replaceAll(" ", "").trim().trim());
                    } else if (dato.compareToIgnoreCase(materias.get(centro).getUnidadAprendizaje()) < 0)
                    {
                        sup = centro - 1;
                    } else
                    {
                        inf = centro + 1;
                    }
                }
                break;
        }
        return -1;
    }

    public String busquedaBinariaBuscaID(String id, String tipo) {
        int n, inf = 0, sup, centro;
        switch (tipo)
        {
            case "profesor":
                n = profes.size();
                sup = n - 1;
                while (inf <= sup)
                {
                    centro = (sup + inf) / 2;
                    if (profes.get(centro).getRfc().equalsIgnoreCase(id))
                    {
                        return profes.get(centro).getRfc();
                    } else if (id.compareToIgnoreCase(profes.get(centro).getRfc()) < 0)
                    {
                        sup = centro - 1;
                    } else
                    {
                        inf = centro + 1;
                    }
                }
                break;
            case "materia":
                n = materias.size();
                sup = n - 1;
                while (inf <= sup)
                {
                    centro = (sup + inf) / 2;
                    if (materias.get(centro).getClaveMateria().equalsIgnoreCase(id))
                    {
                        return materias.get(centro).getClaveMateria();
                    } else if (id.compareToIgnoreCase(materias.get(centro).getClaveMateria()) < 0)
                    {
                        sup = centro - 1;
                    } else
                    {
                        inf = centro + 1;
                    }
                }
                break;
        }
        return "";
    }

    public String busquedaBinariaRetNombre(int dato, String tipo) {
        ordenamientoBurbujaID("grupo");
        int n, inf = 0, sup, centro;
        switch (tipo)
        {
            case "licenciatura":
                n = carreras.size();
                sup = n - 1;
                while (inf <= sup)
                {
                    centro = (sup + inf) / 2;
                    if (Integer.parseInt(carreras.get(centro).getIdLicenciatura()) == dato)
                    {
                        ordenamientoBurbujaNombre("grupo");
                        return carreras.get(centro).getLicenciatura();
                    } else if (dato < Integer.valueOf(carreras.get(centro).getIdLicenciatura()))
                    {
                        sup = centro - 1;
                    } else
                    {
                        inf = centro + 1;
                    }
                }
            case "grupo":
                //ordenamientoBurbujaID("grupo");
                n = grupos.size();
                sup = n - 1;
                while (inf <= sup)
                {
                    centro = (sup + inf) / 2;
                    if (Integer.valueOf(grupos.get(centro).getIdGrupo()) == dato)
                    {
                        return grupos.get(centro).getNombreGrupo();
                    } else if (dato < Integer.valueOf(grupos.get(centro).getIdGrupo()))
                    {
                        sup = centro - 1;
                    } else
                    {
                        inf = centro + 1;
                    }
                }
        }
        ordenamientoBurbujaNombre("grupo");
        return "";
    }

    public void muestraHorarios(PeriodoHorarios horario) {
        System.out.println("Materia " + horario.getClaveMateria());
        System.out.println("RFC " + horario.getRfc());
        System.out.println("Grupo " + horario.getIdGrupo());
        System.out.println("Periodo " + horario.getIdPeriodo());
        System.out.println("Dia " + horario.getDia());
        System.out.println("Entrada " + horario.getEntrada());
        System.out.println("Salida " + horario.getSalida());
    }

    public String busquedaBinariaRetNombre(String dato, String tipo) {
        ordenamientoBurbujaID("materia");
        int n, inf = 0, sup, centro;
        switch (tipo)
        {
            case "materias":
                n = materias.size();
                sup = n - 1;
                while (inf <= sup)
                {
                    centro = (sup + inf) / 2;
                    if (materias.get(centro).getClaveMateria().equalsIgnoreCase(dato))
                    {
                        return materias.get(centro).getUnidadAprendizaje();
                    } else if (dato.compareToIgnoreCase(materias.get(centro).getClaveMateria()) < 0)
                    {
                        sup = centro - 1;
                    } else
                    {
                        inf = centro + 1;
                    }
                }
            case "profesores":
                n = profes.size();
                sup = n - 1;
                while (inf <= sup)
                {
                    centro = (sup + inf) / 2;
                    if (profes.get(centro).getRfc().equalsIgnoreCase(dato))
                    {
                        return profes.get(centro).getNombres() + " " + profes.get(centro).getApellidoP();
                    } else if (dato.compareToIgnoreCase(profes.get(centro).getRfc()) < 0)
                    {
                        sup = centro - 1;
                    } else
                    {
                        inf = centro + 1;
                    }
                }
//            case "grupo":
//                n = grupos.size();
//                sup = n - 1;
//                while (inf <= sup) {
//                    centro = (sup + inf) / 2;
//                    if (Integer.valueOf(grupos.get(centro).getIdGrupo()) == dato) {
//                        return grupos.get(centro).getNombreGrupo();
//                    } else if (dato < Integer.valueOf(grupos.get(centro).getIdGrupo())) {
//                        sup = centro - 1;
//                    } else {
//                        inf = centro + 1;
//                    }
//                }
        }
        return "";
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(VistaExcel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(VistaExcel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(VistaExcel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(VistaExcel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VistaExcel().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCarga;
    public javax.swing.JButton btnImportar1;
    private javax.swing.JButton btnpruebas;
    private javax.swing.JButton jBCerrarSesion;
    private javax.swing.JButton jBRegresar;
    private javax.swing.JButton jButton4;
    private javax.swing.JCheckBox jCheckExcel;
    private javax.swing.JCheckBox jCheckLllaves;
    private javax.swing.JCheckBox jCheckMateriasBD;
    private javax.swing.JCheckBox jCheckProfesores;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    public javax.swing.JTable jTDatosExcel;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea txtCruzeMaterias;
    private javax.swing.JTextArea txtCruzeProfesores;
    private javax.swing.JTextArea txtDatosNoEncontrados;
    private javax.swing.JTextArea txtcruzesExcel;
    private javax.swing.JTextField txtidentifica;
    // End of variables declaration//GEN-END:variables
}
