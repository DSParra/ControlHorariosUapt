/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package app;

import Clases.Archivo;
import Clases.ConectarBase;
import Clases.ConsultasObjetos;
import Clases.Valida;
import Controlador.ControladorHorarios;
import Objetos.Grupo;
import Objetos.HorarioSalida;
import Objetos.Licenciatura;
import Objetos.Materia;
import Objetos.PeriodoHorarios;
import Objetos.Profesor;
import Objetos.Usuario;
import Objetos.periodoEscolar;
import cjb.ci.CtrlInterfaz;
import cjb.ci.Mensaje;
import cjb.ci.Validaciones;
import java.awt.Color;
import java.awt.event.ItemEvent;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Sammy Guergachi <sguergachi at gmail.com>
 */
public class VentanaHorarios extends javax.swing.JFrame {

    int id = 0;
    private Boolean edicion = true;
    private DefaultTableModel modelo;
    private ArrayList<Object> lics = new ArrayList<>();
    private ArrayList<Object> periodos = new ArrayList<>();
    private ArrayList<Object> grupos = new ArrayList<>();
    private ArrayList<Object> grupos1 = new ArrayList<>();
    private ArrayList<Object> materias = new ArrayList<>();
    private ArrayList<Object> profesores = new ArrayList<>();
    private ArrayList<Object> plans = new ArrayList<>();
    private ArrayList<PeriodoHorarios> horariosBD = new ArrayList<>();

    /**
     * Creates new form VentanaPrinicipal
     */
    public VentanaHorarios() {
        initComponents();
        this.setResizable(false);
        this.getContentPane().setBackground(Color.white);
        this.setIconImage(new ImageIcon(getClass().getResource("../Iconos/SCHR.png")).getImage());
        TablaHorarios.getColumnModel().getColumn(0).setPreferredWidth(10);
        TablaHorarios.getColumnModel().getColumn(0).setResizable(false);
        TablaHorarios.getColumnModel().getColumn(1).setPreferredWidth(120);
        TablaHorarios.getColumnModel().getColumn(1).setResizable(false);
        TablaHorarios.getColumnModel().getColumn(2).setPreferredWidth(10);
        TablaHorarios.getColumnModel().getColumn(2).setResizable(false);
        TablaHorarios.getColumnModel().getColumn(3).setPreferredWidth(10);
        TablaHorarios.getColumnModel().getColumn(3).setResizable(false);
        TablaHorarios.getColumnModel().getColumn(4).setPreferredWidth(100);
        TablaHorarios.getColumnModel().getColumn(4).setResizable(false);
        TablaHorarios.getColumnModel().getColumn(5).setPreferredWidth(20);
        TablaHorarios.getColumnModel().getColumn(5).setResizable(false);
        TablaHorarios.getColumnModel().getColumn(6).setPreferredWidth(10);
        TablaHorarios.getColumnModel().getColumn(6).setResizable(false);
        TablaHorarios.getColumnModel().getColumn(7).setPreferredWidth(10);
        TablaHorarios.getColumnModel().getColumn(7).setResizable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jBeliminar = new javax.swing.JButton();
        jBCancelar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        TablaHorarios = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jTEntrada = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        JCDocente = new javax.swing.JComboBox<>();
        jLabel13 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        JCGrupo = new javax.swing.JComboBox<>();
        jTSalida = new javax.swing.JTextField();
        jCPeriodo = new javax.swing.JComboBox<>();
        jCDia = new javax.swing.JComboBox<>();
        JCMateria = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jTIdhorario = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jCLicenciatura = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        jBRegresar = new javax.swing.JButton();
        jBCerrarSesion = new javax.swing.JButton();
        btnExportar = new javax.swing.JButton();
        jBAceptar1 = new javax.swing.JButton();
        jBModificar = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLTituloUAPT = new javax.swing.JLabel();
        jLTituloUniversidad = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        jCGrupofiltro = new javax.swing.JComboBox<>();
        jCPeriodoFiltro = new javax.swing.JComboBox<>();
        jLabel16 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        txtnombreArchivo = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Horarios UAPT");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jBeliminar.setBackground(new java.awt.Color(102, 102, 0));
        jBeliminar.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jBeliminar.setForeground(new java.awt.Color(255, 255, 255));
        jBeliminar.setText("Eliminar");
        jBeliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBeliminarActionPerformed(evt);
            }
        });

        jBCancelar.setBackground(new java.awt.Color(102, 102, 0));
        jBCancelar.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jBCancelar.setForeground(new java.awt.Color(255, 255, 255));
        jBCancelar.setText("Cancelar");
        jBCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBCancelarActionPerformed(evt);
            }
        });

        TablaHorarios.setBackground(new java.awt.Color(25, 83, 0));
        TablaHorarios.setForeground(new java.awt.Color(254, 254, 254));
        TablaHorarios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "CLAVE", "MATERIA", "GRUPO", "PERIODO", "PROFESOR", "DIA", "ENTRADA", "SALIDA"
            }
        ));
        TablaHorarios.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TablaHorariosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(TablaHorarios);

        jPanel1.setBackground(new java.awt.Color(25, 83, 0));

        jTEntrada.setBackground(new java.awt.Color(254, 254, 254));
        jTEntrada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTEntradaActionPerformed(evt);
            }
        });
        jTEntrada.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTEntradaKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTEntradaKeyTyped(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(254, 254, 254));
        jLabel9.setText("MATERIA");

        jLabel7.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(254, 254, 254));
        jLabel7.setText("GRUPO");

        JCDocente.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Mauro Sanchez Sanchez", "Elsa Vidal Hernandez", "Estefania Hernandez Caballero" }));
        JCDocente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                JCDocenteKeyPressed(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(254, 254, 254));
        jLabel13.setText("HORA ENTRADA");

        jLabel6.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(254, 254, 254));
        jLabel6.setText("PERIODO");

        jLabel11.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(254, 254, 254));
        jLabel11.setText("DIA");

        JCGrupo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "S1", "S2", "S3", "S4", "S5" }));
        JCGrupo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                JCGrupoKeyPressed(evt);
            }
        });

        jTSalida.setBackground(new java.awt.Color(254, 254, 254));
        jTSalida.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTSalidaKeyPressed(evt);
            }
        });

        jCPeriodo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2021A", "2021B" }));
        jCPeriodo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jCPeriodoKeyPressed(evt);
            }
        });

        jCDia.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Lunes", "Martes", "Miercoles", "Jueves", "Viernes", "Sabado" }));

        JCMateria.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Algebra", "Computacion", "Inlges", "Calculo Diferencial E Integral" }));
        JCMateria.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                JCMateriaKeyPressed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(254, 254, 254));
        jLabel10.setText("DOCENTE");

        jLabel4.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(254, 254, 254));
        jLabel4.setText("MATRICULA");

        jTIdhorario.setBackground(new java.awt.Color(254, 254, 254));
        jTIdhorario.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTIdhorarioFocusLost(evt);
            }
        });
        jTIdhorario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTIdhorarioActionPerformed(evt);
            }
        });
        jTIdhorario.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTIdhorarioKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTIdhorarioKeyTyped(evt);
            }
        });

        jLabel14.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(254, 254, 254));
        jLabel14.setText("HORA SALIDA");

        jCLicenciatura.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2021A", "2021B" }));
        jCLicenciatura.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCLicenciaturaItemStateChanged(evt);
            }
        });
        jCLicenciatura.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jCLicenciaturaKeyPressed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(254, 254, 254));
        jLabel8.setText("LICENCIATURA");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jTIdhorario)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel13)
                            .addComponent(jLabel14))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTEntrada)
                            .addComponent(jTSalida, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCPeriodo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCLicenciatura, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(JCGrupo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(JCMateria, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(JCDocente, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCDia, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTIdhorario, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCPeriodo, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCLicenciatura, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(JCGrupo, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(JCMateria, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(JCDocente, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(jCDia, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel14))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jTSalida, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                            .addComponent(jTEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(39, 39, 39))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jBRegresar.setBackground(new java.awt.Color(102, 102, 0));
        jBRegresar.setForeground(new java.awt.Color(255, 255, 255));
        jBRegresar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/flecha(2).png"))); // NOI18N
        jBRegresar.setText("Regresar");
        jBRegresar.setToolTipText("");
        jBRegresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBRegresarActionPerformed(evt);
            }
        });

        jBCerrarSesion.setBackground(new java.awt.Color(102, 102, 0));
        jBCerrarSesion.setForeground(new java.awt.Color(255, 255, 255));
        jBCerrarSesion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/flecha(3).png"))); // NOI18N
        jBCerrarSesion.setText("Salir");
        jBCerrarSesion.setToolTipText("");
        jBCerrarSesion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBCerrarSesionActionPerformed(evt);
            }
        });

        btnExportar.setBackground(new java.awt.Color(102, 102, 0));
        btnExportar.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btnExportar.setForeground(new java.awt.Color(255, 255, 255));
        btnExportar.setText("Exportar");
        btnExportar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportarActionPerformed(evt);
            }
        });

        jBAceptar1.setBackground(new java.awt.Color(102, 102, 0));
        jBAceptar1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jBAceptar1.setForeground(new java.awt.Color(255, 255, 255));
        jBAceptar1.setText("Aceptar");
        jBAceptar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBAceptar1ActionPerformed(evt);
            }
        });

        jBModificar.setBackground(new java.awt.Color(102, 102, 0));
        jBModificar.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jBModificar.setForeground(new java.awt.Color(255, 255, 255));
        jBModificar.setText("Modificar");
        jBModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBModificarActionPerformed(evt);
            }
        });

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/UAEMex.jpg"))); // NOI18N

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(1, 1, 1));
        jLabel2.setText("GESTION HORARIOS");

        jLTituloUAPT.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLTituloUAPT.setText("UNIDAD ACADEMICA PROFESIONAL TIANGUISTENCO");

        jLTituloUniversidad.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLTituloUniversidad.setText("UNIVERSIDAD AUTONOMA DEL ESTADO DE MEXICO");

        jPanel2.setBackground(new java.awt.Color(25, 83, 0));

        jLabel15.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(254, 254, 254));
        jLabel15.setText("GRUPO");

        jCGrupofiltro.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2021A", "2021B" }));
        jCGrupofiltro.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCGrupofiltroItemStateChanged(evt);
            }
        });

        jCPeriodoFiltro.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2021A", "2021B" }));
        jCPeriodoFiltro.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCPeriodoFiltroItemStateChanged(evt);
            }
        });

        jLabel16.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(254, 254, 254));
        jLabel16.setText("PERIODO");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(61, Short.MAX_VALUE)
                .addComponent(jLabel15)
                .addGap(18, 18, 18)
                .addComponent(jCGrupofiltro, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel16)
                .addGap(18, 18, 18)
                .addComponent(jCPeriodoFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel16)
                        .addComponent(jCPeriodoFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jCGrupofiltro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel15))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Nombre del archivo");

        txtnombreArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtnombreArchivoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jBAceptar1, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jBModificar, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jBeliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jBCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jBRegresar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jBCerrarSesion, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLTituloUniversidad)
                                    .addComponent(jLabel2)
                                    .addComponent(jLTituloUAPT))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 292, Short.MAX_VALUE)
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(106, 106, 106)))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 775, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addGap(9, 9, 9)
                                    .addComponent(txtnombreArchivo, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(btnExportar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(40, 40, 40))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel5)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLTituloUniversidad)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jLTituloUAPT)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jLabel2)))
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jBAceptar1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jBModificar, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jBeliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jBCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jBRegresar, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jBCerrarSesion, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtnombreArchivo, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34)
                        .addComponent(btnExportar)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jTIdhorarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTIdhorarioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTIdhorarioActionPerformed

    private void jBeliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBeliminarActionPerformed
        if (Mensaje.pregunta(this, "¿Seguro que desea eliminar este registro?") == 0)
        {
            String mensaje = Controlador.ControladorHorarios.eliminaHorario(jTIdhorario.getText());
            if (mensaje.endsWith("operacion exitosa"))
            {
                actualizaTabla(1);
                jCGrupofiltro.setSelectedIndex(0);
            } else
            {
                JOptionPane.showMessageDialog(rootPane, mensaje);
            }
        }
    }//GEN-LAST:event_jBeliminarActionPerformed

    private void jBCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBCancelarActionPerformed
        cancelar();
    }//GEN-LAST:event_jBCancelarActionPerformed

    private void jBRegresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBRegresarActionPerformed
        this.setVisible(false);
        new VentanaAdministrador().setVisible(true);
    }//GEN-LAST:event_jBRegresarActionPerformed

    private void jBCerrarSesionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBCerrarSesionActionPerformed
        this.setVisible(false);
        new VentanaLogin().setVisible(true);
    }//GEN-LAST:event_jBCerrarSesionActionPerformed

    private void jTEntradaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTEntradaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTEntradaActionPerformed

    private void btnExportarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportarActionPerformed
        if (txtnombreArchivo.getText() != null) {
            String mensaje = Archivo.Exportar(TablaHorarios, txtnombreArchivo.getText());
            if (mensaje.equals("Error en la Exportacion")) {
                Mensaje.error(this, mensaje);
            } else {
                Mensaje.exito(this, mensaje);
            }
        } else {
            Mensaje.error(this, "Escriba el nombre del archivo");
        }
    }//GEN-LAST:event_btnExportarActionPerformed

    private void jBAceptar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBAceptar1ActionPerformed
        if (!edicion)
        {
            edicion();
            jBAceptar1.setText("Aceptar");
            CtrlInterfaz.limpia(jTEntrada, jTSalida, jTIdhorario);
            CtrlInterfaz.habilita(true, jTSalida, jTEntrada, jTIdhorario, jCPeriodo, jCLicenciatura, JCGrupo, JCMateria, JCDocente, jCDia, jBCancelar);
            CtrlInterfaz.habilita(false, jBeliminar, jBModificar, btnExportar);
            CtrlInterfaz.selecciona(jTIdhorario);
        } else
        {
            PeriodoHorarios horario = new PeriodoHorarios(jTIdhorario.getText(), buscaMateria(null, JCMateria.getSelectedItem().toString()), buscaGrupo(null, JCGrupo.getSelectedItem().toString()), buscaPeriodo(null, jCPeriodo.getSelectedItem().toString()), buscaProfesor(null, JCDocente.getSelectedItem().toString()), jCDia.getSelectedItem().toString(), jTEntrada.getText(), jTSalida.getText());
            String mensaje = ControladorHorarios.insertaHorarioUnico(horario);
            boolean var;
            boolean var2, registro;
            if (mensaje.equals("operacion exitosa"))
            {
                var = comparaGrupos(horario);
                var2 = comparaProfesores(horario);
                if (var == false)
                {
                    Mensaje.error(this, "Corrija las horas de entrada y salida de la materia que quiere asignar en este grupo");
                } else
                {
                    if (var2 == false)
                    {
                        Mensaje.error(this, "Corrija el horario en el que el docente impartira la materia");
                    } else
                    {
                        registro = ControladorHorarios.insertaEnBaseUnicoHorario(horario);
                        if (registro == false)
                        {
                            Mensaje.exito(this, "Horario registrado correctamente");
                            jBAceptar1.setText("Nuevo");
                            CtrlInterfaz.limpia(jTEntrada, jTSalida, jTIdhorario);
                            CtrlInterfaz.habilita(false, jTSalida, jTEntrada, jTIdhorario, jCPeriodo, jCLicenciatura, JCGrupo, JCMateria, JCDocente, jCDia, jBCancelar);
                            CtrlInterfaz.habilita(true, jBAceptar1, jBeliminar, jBModificar, btnExportar);
                            jCGrupofiltro.setSelectedIndex(0);
                            actualizaTabla(1);
                            edicion();
                            CtrlInterfaz.limpia(jTIdhorario, jTEntrada, jTSalida);
                        } else
                        {
                            Mensaje.error(this, "No se pudo registrar el horario");
                        }
                    }
                }
            } else
            {
                JOptionPane.showMessageDialog(rootPane, mensaje);
            }

        }
    }//GEN-LAST:event_jBAceptar1ActionPerformed

    private void jBModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBModificarActionPerformed
        if (jTIdhorario.getText().compareTo("") == 0)
        {
            Mensaje.error(this, "No ha seleccionado nungun registro");
        } else
        {
            if (!edicion)
            {
                edicion();
                jBModificar.setText("Aceptar");
                CtrlInterfaz.habilita(true, jTSalida, jTEntrada, jCPeriodo, jCLicenciatura, JCGrupo, JCMateria, JCDocente, jCDia, jBCancelar);
                CtrlInterfaz.habilita(false, jBeliminar, jBAceptar1, btnExportar);

            } else
            {
                PeriodoHorarios horario = new PeriodoHorarios(jTIdhorario.getText(), buscaMateria(null, JCMateria.getSelectedItem().toString()), buscaGrupo(null, JCGrupo.getSelectedItem().toString()), buscaPeriodo(null, jCPeriodo.getSelectedItem().toString()), buscaProfesor(null, JCDocente.getSelectedItem().toString()), jCDia.getSelectedItem().toString(), jTEntrada.getText(), jTSalida.getText());
                String mensaje = ControladorHorarios.modificaHorarioUnico(horario, (String) modelo.getValueAt(TablaHorarios.getSelectedRow(), 0));
                boolean var;
                boolean var2, registro;
                if (mensaje.equals("operacion exitosa"))
                {
                    var = comparaGrupos(horario);
                    var2 = comparaProfesores(horario);
                    if (var == false)
                    {
                        Mensaje.error(this, "Corrija las horas de entrada y salida de la materia que quiere asignar en este grupo");
                    } else
                    {
                        if (var2 == false)
                        {
                            Mensaje.error(this, "Corrija el horario en el que el docente impartira la materia");
                        } else
                        {
                            registro = ControladorHorarios.modificaEnBaseUnicoHorario(horario, (String) modelo.getValueAt(TablaHorarios.getSelectedRow(), 0));
                            if (registro == true)
                            {
                                Mensaje.exito(this, "Horario modificado correctamente");
                                jBModificar.setText("Modificar");
                                CtrlInterfaz.limpia(jTEntrada, jTSalida, jTIdhorario);
                                CtrlInterfaz.habilita(false, jTSalida, jTEntrada, jTIdhorario, jCPeriodo, jCLicenciatura, JCGrupo, JCMateria, JCDocente, jCDia, jBCancelar);
                                CtrlInterfaz.habilita(true, jBAceptar1, jBeliminar, jBModificar, btnExportar);
                                jCGrupofiltro.setSelectedIndex(0);
                                actualizaTabla(1);
                                edicion();
                                CtrlInterfaz.limpia(jTIdhorario, jTEntrada, jTSalida);
                            } else
                            {
                                Mensaje.error(this, "No se pudo registrar el horario");
                            }
                        }
                    }
                } else
                {
                    JOptionPane.showMessageDialog(rootPane, mensaje);
                }
            }
        }
    }//GEN-LAST:event_jBModificarActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        System.out.println("conecta");
        cancelar();
        actualizaTabla(1);
        llenaGruposFiltro();
        cargaPeriodos();
        llenaLicenciatura();
        llenaGrupos();
        llenaMaterias();
        llenaDocentes();
    }//GEN-LAST:event_formWindowOpened

    private void jTIdhorarioKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTIdhorarioKeyPressed
        Validaciones.enter(this, evt, jCPeriodo);
    }//GEN-LAST:event_jTIdhorarioKeyPressed

    private void jCPeriodoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jCPeriodoKeyPressed
        Validaciones.enter(this, evt, JCGrupo);
    }//GEN-LAST:event_jCPeriodoKeyPressed

    private void JCGrupoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_JCGrupoKeyPressed
        Validaciones.enter(this, evt, JCMateria);
    }//GEN-LAST:event_JCGrupoKeyPressed

    private void JCMateriaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_JCMateriaKeyPressed
        Validaciones.enter(this, evt, JCDocente);
    }//GEN-LAST:event_JCMateriaKeyPressed

    private void JCDocenteKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_JCDocenteKeyPressed
        Validaciones.enter(this, evt, jTEntrada);
    }//GEN-LAST:event_JCDocenteKeyPressed

    private void jTEntradaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTEntradaKeyPressed
        Validaciones.enter(this, evt, jTSalida);
    }//GEN-LAST:event_jTEntradaKeyPressed

    private void jTIdhorarioKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTIdhorarioKeyTyped
        Validaciones.validaAlfanumerico(evt);
        Valida.validaLongitud(jTIdhorario, 10, evt);
    }//GEN-LAST:event_jTIdhorarioKeyTyped

    private void jTIdhorarioFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTIdhorarioFocusLost
        Valida.convertirAMayusculas(jTIdhorario);
    }//GEN-LAST:event_jTIdhorarioFocusLost

    private void jTEntradaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTEntradaKeyTyped

    }//GEN-LAST:event_jTEntradaKeyTyped

    private void jTSalidaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTSalidaKeyPressed

    }//GEN-LAST:event_jTSalidaKeyPressed

    private void jCLicenciaturaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jCLicenciaturaKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCLicenciaturaKeyPressed

    private void jCLicenciaturaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCLicenciaturaItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED)
        {
            //Licenciatura lic = (Licenciatura) jCLicenciatura.getSelectedItem();
            grupos = ConsultasObjetos.consultaMuchos("grupo", "id_licenciatura", buscaLic(null, jCLicenciatura.getSelectedItem().toString()), null, null, "nombre_grupo", ConectarBase.conectado());
            materias = ConsultasObjetos.consultaMuchos("materia", "id_licenciatura", buscaLic(null, jCLicenciatura.getSelectedItem().toString()), null, null, "unidad_aprendizaje", ConectarBase.conectado());
            llenaGrupos();
            llenaMaterias();
        }
    }//GEN-LAST:event_jCLicenciaturaItemStateChanged

    private void jCGrupofiltroItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCGrupofiltroItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED)
        {
            actualizaTabla(2);
            jCPeriodoFiltro.setSelectedIndex(0);
        }
    }//GEN-LAST:event_jCGrupofiltroItemStateChanged

    private void jCPeriodoFiltroItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCPeriodoFiltroItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED)
        {
            actualizaTabla(3);
        }
    }//GEN-LAST:event_jCPeriodoFiltroItemStateChanged

    private void TablaHorariosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TablaHorariosMouseClicked
        jTIdhorario.setText((String) modelo.getValueAt(TablaHorarios.getSelectedRow(), 0));
        JCMateria.setSelectedIndex((buscarCombo((String) modelo.getValueAt(TablaHorarios.getSelectedRow(), 1), JCMateria)));
        String GrupoACombo = retornameLic((String) modelo.getValueAt(TablaHorarios.getSelectedRow(), 2));
        jCLicenciatura.setSelectedIndex((buscarCombo(buscaLic(GrupoACombo, null), jCLicenciatura)));
        JCGrupo.setSelectedIndex((buscarCombo((String) modelo.getValueAt(TablaHorarios.getSelectedRow(), 2), JCGrupo)));
        jCPeriodo.setSelectedIndex((buscarCombo((String) modelo.getValueAt(TablaHorarios.getSelectedRow(), 3), jCPeriodo)));
        JCDocente.setSelectedIndex((buscarCombo((String) modelo.getValueAt(TablaHorarios.getSelectedRow(), 4), JCDocente)));
        jCDia.setSelectedIndex((buscarCombo((String) modelo.getValueAt(TablaHorarios.getSelectedRow(), 5), jCDia)));
        jTEntrada.setText((String) modelo.getValueAt(TablaHorarios.getSelectedRow(), 6));
        jTSalida.setText((String) modelo.getValueAt(TablaHorarios.getSelectedRow(), 7));
    }//GEN-LAST:event_TablaHorariosMouseClicked

    private void txtnombreArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtnombreArchivoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtnombreArchivoActionPerformed

    public void actualizaTabla(int valor) {
        lics = ConsultasObjetos.consultaMuchos("licenciatura", null, null, null, null, "nombre", ConectarBase.conectado());
        periodos = ConsultasObjetos.consultaMuchos("periodo_escolar", null, null, null, null, "periodo", ConectarBase.conectado());
        grupos1 = ConsultasObjetos.consultaMuchos("grupo", null, null, null, null, "nombre_grupo", ConectarBase.conectado());
        grupos = ConsultasObjetos.consultaMuchos("grupo", null, null, null, null, "nombre_grupo", ConectarBase.conectado());
        materias = ConsultasObjetos.consultaMuchos("materia", null, null, null, null, "unidad_aprendizaje", ConectarBase.conectado());
        profesores = ConsultasObjetos.consultaMuchos("profesores", "nivel", "profesor", null, null, "nombres", ConectarBase.conectado());
        modelo = (DefaultTableModel) TablaHorarios.getModel();
        ArrayList horarios = new ArrayList();
        switch (valor)
        {
            case 1:
                horarios = ConsultasObjetos.consultaMuchos("horarios", null, null, null, null, "hr_entrada", ConectarBase.conectado());
                if (horarios.isEmpty())
                {
                    Mensaje.error(this, "No se encuentran registros");
                } else
                {
                    modelo.setRowCount(0);
                    for (Object p : horarios)
                    {
                        PeriodoHorarios horario = (PeriodoHorarios) p;
                        modelo.addRow(new Object[]
                        {
                            horario.getIdHorario(), buscaMateria(horario.getClaveMateria(), null), buscaGrupo(horario.getIdGrupo(), null), buscaPeriodo(horario.getIdPeriodo(), null), buscaProfesor(horario.getRfc(), null), horario.getDia(), horario.getEntrada(), horario.getSalida()
                        });
                    }
                }
                break;
            case 2:
                if (jCGrupofiltro.getSelectedIndex() == 0)
                {
                    actualizaTabla(1);
                } else
                {
                    horarios = ConsultasObjetos.consultaMuchos("horarios", "id_grupo", buscaGrupoFiltro(null, jCGrupofiltro.getSelectedItem().toString()), null, null, "hr_entrada", ConectarBase.conectado());
                    if (horarios.isEmpty())
                    {
                        Mensaje.error(this, "No se encuentran registros");
                    } else
                    {
                        modelo.setRowCount(0);
                        for (Object p : horarios)
                        {
                            PeriodoHorarios horario = (PeriodoHorarios) p;
                            modelo.addRow(new Object[]
                            {
                                horario.getIdHorario(), buscaMateria(horario.getClaveMateria(), null), buscaGrupo(horario.getIdGrupo(), null), buscaPeriodo(horario.getIdPeriodo(), null), buscaProfesor(horario.getRfc(), null), horario.getDia(), horario.getEntrada(), horario.getSalida()
                            });
                        }
                    }
                }
                break;
            case 3:
                if (jCPeriodoFiltro.getSelectedIndex() == 0)
                {
                    actualizaTabla(2);
                } else
                {
                    horarios = ConsultasObjetos.consultaMuchos("horarios", "id_grupo", buscaGrupoFiltro(null, jCGrupofiltro.getSelectedItem().toString()), "id_periodo", buscaPeriodo(null, jCPeriodoFiltro.getSelectedItem().toString()), "hr_entrada", ConectarBase.conectado());
                    if (horarios.isEmpty())
                    {
                        Mensaje.error(this, "No se encuentran registros");
                    } else
                    {
                        modelo.setRowCount(0);
                        for (Object p : horarios)
                        {
                            PeriodoHorarios horario = (PeriodoHorarios) p;
                            modelo.addRow(new Object[]
                            {
                                horario.getIdHorario(), buscaMateria(horario.getClaveMateria(), null), buscaGrupo(horario.getIdGrupo(), null), buscaPeriodo(horario.getIdPeriodo(), null), buscaProfesor(horario.getRfc(), null), horario.getDia(), horario.getEntrada(), horario.getSalida()
                            });
                        }
                    }
                }
                break;
            default:
                break;
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(VentanaHorarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(VentanaHorarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(VentanaHorarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(VentanaHorarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaHorarios().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> JCDocente;
    private javax.swing.JComboBox<String> JCGrupo;
    private javax.swing.JComboBox<String> JCMateria;
    private javax.swing.JTable TablaHorarios;
    private javax.swing.JButton btnExportar;
    private javax.swing.JButton jBAceptar1;
    private javax.swing.JButton jBCancelar;
    private javax.swing.JButton jBCerrarSesion;
    private javax.swing.JButton jBModificar;
    private javax.swing.JButton jBRegresar;
    private javax.swing.JButton jBeliminar;
    private javax.swing.JComboBox<String> jCDia;
    private javax.swing.JComboBox<String> jCGrupofiltro;
    private javax.swing.JComboBox<String> jCLicenciatura;
    private javax.swing.JComboBox<String> jCPeriodo;
    private javax.swing.JComboBox<String> jCPeriodoFiltro;
    private javax.swing.JLabel jLTituloUAPT;
    private javax.swing.JLabel jLTituloUniversidad;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTEntrada;
    private javax.swing.JTextField jTIdhorario;
    private javax.swing.JTextField jTSalida;
    private javax.swing.JTextField txtnombreArchivo;
    // End of variables declaration//GEN-END:variables

    public String buscaLic(String id, String licenciatura) {
        if (licenciatura != null)
        {
            for (Object l : lics)
            {
                Licenciatura lic = (Licenciatura) l;
                if ((lic.getLicenciatura()).equals(licenciatura))
                {
                    return lic.getIdLicenciatura();
                }
            }
        } else
        {
            for (Object l : lics)
            {
                Licenciatura lic = (Licenciatura) l;
                if (lic.getIdLicenciatura().equals(id))
                {
                    return lic.getLicenciatura();
                }
            }
        }
        return null;
    }

    private String buscaProfesor(String rfc, String profesor) {
        if (profesor != null)
        {
            for (Object p : profesores)
            {
                Profesor pr = (Profesor) p;
                if ((pr.getNombres() + " " + pr.getApellidoP() + " " + pr.getApellidoM()).equals(profesor))
                {
                    return pr.getRfc();
                }
            }
        } else
        {
            for (Object p : profesores)
            {
                Profesor pr = (Profesor) p;
                if ((pr.getRfc()).equals(rfc))
                {
                    return pr.getNombres() + " " + pr.getApellidoP() + " " + pr.getApellidoM();
                }
            }
        }
        return null;
    }

    private void cargaPeriodos() {
        jCPeriodo.removeAllItems();
        jCPeriodoFiltro.removeAllItems();
        jCPeriodoFiltro.addItem("TODOS");
        for (int i = 0; i < periodos.size(); i++)
        {
            jCPeriodo.addItem(((periodoEscolar) periodos.get(i)).getPeriodo());
            jCPeriodoFiltro.addItem(((periodoEscolar) periodos.get(i)).getPeriodo());
        }
    }

    private void llenaGrupos() {
        JCGrupo.removeAllItems();
        for (int i = 0; i < grupos.size(); i++)
        {
            JCGrupo.addItem(((Grupo) grupos.get(i)).getNombreGrupo());
        }
    }

    private void llenaGruposFiltro() {
        jCGrupofiltro.removeAllItems();
        jCGrupofiltro.addItem("Todos");
        for (int i = 0; i < grupos1.size(); i++)
        {
            jCGrupofiltro.addItem(((Grupo) grupos1.get(i)).getNombreGrupo());
        }
    }

    private void llenaMaterias() {
        JCMateria.removeAllItems();
        for (int i = 0; i < materias.size(); i++)
        {
            JCMateria.addItem(((Materia) materias.get(i)).getUnidadAprendizaje());
        }
    }

    private void llenaDocentes() {
        JCDocente.removeAllItems();
        for (int i = 0; i < profesores.size(); i++)
        {
            JCDocente.addItem(((Profesor) profesores.get(i)).getNombres() + " " + ((Profesor) profesores.get(i)).getApellidoP() + " " + ((Profesor) profesores.get(i)).getApellidoM());
        }
    }

    private void edicion() {
        if (edicion)
        {
            edicion = false;
        } else
        {
            edicion = true;
        }
    }

    private void llenaLicenciatura() {
        jCLicenciatura.removeAllItems();
        for (int i = 0; i < lics.size(); i++)
        {
            jCLicenciatura.addItem(((Licenciatura) lics.get(i)).getLicenciatura());
        }
    }

    private String buscaGrupo(String id, String grupo) {
        if (grupo != null)
        {
            for (Object g : grupos)
            {
                Grupo gr = (Grupo) g;
                if (gr.getNombreGrupo().equals(grupo))
                {
                    return gr.getIdGrupo();
                }
            }
        } else
        {
            for (Object g : grupos)
            {
                Grupo gr = (Grupo) g;
                if (gr.getIdGrupo().equals(id))
                {
                    return gr.getNombreGrupo();
                }
            }
        }
        return null;
    }

    private String buscaGrupoFiltro(String id, String grupo) {
        System.out.println("netree al filtro");
        if (grupo != null)
        {
            for (Object g : grupos1)
            {
                Grupo gr = (Grupo) g;
                if (gr.getNombreGrupo().equals(grupo))
                {
                    return gr.getIdGrupo();
                }
            }
        } else
        {
            for (Object g : grupos1)
            {
                Grupo gr = (Grupo) g;
                if (gr.getIdGrupo().equals(id))
                {
                    return gr.getNombreGrupo();
                }
            }
        }
        return null;
    }

    private String buscaPeriodo(String id, String periodo) {
        if (periodo != null)
        {
            for (Object p : periodos)
            {
                periodoEscolar gr = (periodoEscolar) p;
                if ((gr.getPeriodo()).equals(periodo))
                {
                    return gr.getId_periodo();
                }
            }
        } else
        {
            for (Object p : periodos)
            {
                periodoEscolar gr = (periodoEscolar) p;
                if ((gr.getId_periodo()).equals(id))
                {
                    return gr.getPeriodo();
                }
            }
        }
        return null;
    }

    private String buscaMateria(String id, String materia) {
        if (materia != null)
        {
            for (Object m : materias)
            {
                Materia mt = (Materia) m;
                if (mt.getUnidadAprendizaje().equals(materia))
                {
                    return mt.getClaveMateria();
                }
            }
        } else
        {
            for (Object m : materias)
            {
                Materia mt = (Materia) m;
                if (mt.getClaveMateria().equals(id))
                {
                    return mt.getUnidadAprendizaje();
                }
            }
        }
        return null;
    }

    private boolean comparaGrupos(PeriodoHorarios hr) {
        boolean var = true;
        double entradaHR, salidaHR, entradaBd, salidaBD;
        System.out.println("grpo " + hr.getIdGrupo());
        materias = ConsultasObjetos.consultaMuchos("materia", null, null, null, null, "unidad_aprendizaje", ConectarBase.conectado());
        horariosBD = new ArrayList(ConsultasObjetos.consultaMuchos("horarios", null, null, null, null, null, ConectarBase.conectado()));
        for (int i = 0; i < horariosBD.size(); i++)
        {
            if (!hr.getIdHorario().equals(horariosBD.get(i).getIdHorario()) && hr.getDia().equals(horariosBD.get(i).getDia()) && hr.getIdGrupo().equals(horariosBD.get(i).getIdGrupo()) && hr.getIdPeriodo().equals(horariosBD.get(i).getIdPeriodo()))
            {
                System.out.println("+ + + + + Es el mismo dia en " + i + " y elm mismo grupo en registro " + horariosBD.get(i).getIdHorario());
                entradaHR = Double.parseDouble(hr.getEntrada().substring(0, 2) + "." + hr.getEntrada().substring(3, 5));
                salidaHR = Double.parseDouble(hr.getSalida().substring(0, 2) + "." + hr.getSalida().substring(3, 5));
                entradaBd = Double.parseDouble(horariosBD.get(i).getEntrada().substring(0, 2) + "." + horariosBD.get(i).getEntrada().substring(3, 5));
                salidaBD = Double.parseDouble(horariosBD.get(i).getSalida().substring(0, 2) + "." + horariosBD.get(i).getSalida().substring(3, 5));

                System.out.println(". . . . . entrada registro " + entradaHR + " Y salida " + salidaHR);
                System.out.println(". . . . . entrada registro " + entradaBd + " Y salida " + salidaBD);
                if (entradaHR >= entradaBd && entradaHR < salidaBD)
                {
                    Mensaje.error(this, "Este grupo ya tiene la materia de " + buscaMateria(horariosBD.get(i).getClaveMateria(), null) + " De las " + entradaBd + "Hrs. a las " + salidaBD + "Hrs.");
                    var = false;
                }
            }
        }
        return var;
    }

    private boolean comparaProfesores(PeriodoHorarios hr) {
        System.out.println("entre a profesores");
        boolean var = true;
        double entradaHR, salidaHR, entradaBd, salidaBD;
        horariosBD = new ArrayList(ConsultasObjetos.consultaMuchos("horarios", null, null, null, null, null, ConectarBase.conectado()));
        grupos = ConsultasObjetos.consultaMuchos("grupo", null, null, null, null, "nombre_grupo", ConectarBase.conectado());

        for (int i = 0; i < horariosBD.size(); i++)
        {
            if (!hr.getIdHorario().equals(horariosBD.get(i).getIdHorario()) && hr.getRfc().equalsIgnoreCase(horariosBD.get(i).getRfc()) && hr.getDia().equals(horariosBD.get(i).getDia()) && hr.getIdPeriodo().equals(horariosBD.get(i).getIdPeriodo()))
            {
                System.out.println("+ + + + + Es el mismo rfc  y el mismo dia en registro " + horariosBD.get(i).getIdHorario());
                entradaHR = Double.parseDouble(hr.getEntrada().substring(0, 2) + "." + hr.getEntrada().substring(3, 5));
                salidaHR = Double.parseDouble(hr.getSalida().substring(0, 2) + "." + hr.getSalida().substring(3, 5));
                entradaBd = Double.parseDouble(horariosBD.get(i).getEntrada().substring(0, 2) + "." + horariosBD.get(i).getEntrada().substring(3, 5));
                salidaBD = Double.parseDouble(horariosBD.get(i).getSalida().substring(0, 2) + "." + horariosBD.get(i).getSalida().substring(3, 5));
                System.out.println("Grupo: " + horariosBD.get(i).getIdGrupo());
                System.out.println("Grupo: " + buscaGrupo(horariosBD.get(i).getIdGrupo(), null));
                System.out.println(". . . . . entrada hr " + entradaHR + " Y salida " + salidaHR);
                System.out.println(". . . . . entrada bd " + entradaBd + " Y salida " + salidaBD);
                if (entradaHR >= entradaBd && entradaHR < salidaBD)
                {
                    Mensaje.error(this, "Este docente ya tiene una materia asignada de las: " + entradaBd + " Hrs. a las " + salidaBD + " Hrs. En el grupo " + buscaGrupo(horariosBD.get(i).getIdGrupo(), null));
                    //System.out.println("! ! ! ! ! Choque de horas de entradaHR: " + entradaHR + " con entradaBD: " + entradaBd +" y salidaBD: " + salidaBD);
                    //System.out.println("Del registro: " + horariosBD.get(i).getIdHorario());
                    var = false;
                }
            }
        }
        return var;
    }

    private void cancelar() {
        edicion();
        CtrlInterfaz.limpia(jTIdhorario, jTEntrada, jTSalida);
        CtrlInterfaz.habilita(false, jTIdhorario, jCPeriodo, jCLicenciatura, JCGrupo, JCMateria, JCDocente, jCDia, jTEntrada, jTSalida, jBCancelar);
        CtrlInterfaz.habilita(true, jBAceptar1, jBModificar, jBeliminar, btnExportar);
        jBAceptar1.setText("Nuevo");
        jBModificar.setText("Modificar");
    }

    private boolean insertaEnBaseUnicoHorario(PeriodoHorarios horario) {
        boolean registro = ConsultasObjetos.inserta(horario, ConectarBase.conectado(), "horarios");
        return registro;
    }

    private int buscarCombo(String text, JComboBox<String> jCombo) {
        for (int i = 0; i < jCombo.getItemCount(); i++)
        {
            if (text.equals(jCombo.getItemAt(i)))
            {
                return i;
            }
        }
        return 0;
    }

    private String retornameLic(String grupito) {
        Grupo gp = new Grupo();
        gp = (Grupo) ConsultasObjetos.consultaUnica("grupo", "nombre_grupo", grupito, ConectarBase.conectado());
        if (gp != null)
        {
            return gp.getId_licenciatura();
        } else
        {
            return "Sin datos";
        }
    }
}
